// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ShiftServer_Messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ShiftServer_Messages.proto</summary>
public static partial class ShiftServerMessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for ShiftServer_Messages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ShiftServerMessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpTaGlmdFNlcnZlcl9NZXNzYWdlcy5wcm90byLeBAoPU2hpZnRTZXJ2ZXJE",
          "YXRhEiAKCGJhc2V2dGlkGAEgASgOMg4uTVNCYXNlRXZlbnRJZBIfCgdzdmV2",
          "dGlkGAIgASgOMg4uTVNTZXJ2ZXJFdmVudBIfCgdwbGV2dGlkGAMgASgOMg4u",
          "TVNQbGF5ZXJFdmVudBIdCgdTZXNzaW9uGAQgASgLMgwuU2Vzc2lvbkRhdGES",
          "HwoKQ2xpZW50SW5mbxgFIAEoCzILLkNsaWVudERhdGESJwoLQWNjb3VudERh",
          "dGEYBiABKAsyEi5Db21tb25BY2NvdW50RGF0YRIbCghSb29tRGF0YRgHIAEo",
          "CzIJLlJvb21EYXRhEh0KB0FjY291bnQYCCABKAsyDC5BY2NvdW50RGF0YRIl",
          "Cg5Hb1VwZGF0ZVBhY2tldBgJIAEoCzINLlVwZGF0ZUdPTGlzdBIiCgtJbnRl",
          "cmFjdGlvbhgKIAEoCzINLk9iamVjdEFjdGlvbhIiCgtQbGF5ZXJJbnB1dBgL",
          "IAEoCzINLlNQbGF5ZXJJbnB1dBIkCg1zUGxheWVyT2JqZWN0GAwgASgLMg0u",
          "UGxheWVyT2JqZWN0EiYKC0Vycm9yUmVhc29uGA0gASgOMhEuU2hpZnRTZXJ2",
          "ZXJFcnJvchIRCglTZXNzaW9uSUQYDiABKAkSKQoPTWF0Y2htYWtpbmdEYXRh",
          "GA8gASgLMhAuTWF0Y2htYWtpbmdEYXRhEhgKEFRpbWVCZXR3ZWVuVGlja3MY",
          "ECABKAESGQoRQ3VycmVudFNlcnZlclRpbWUYESABKAESEgoKc3ZUaWNrUmF0",
          "ZRgSIAEoBSIaCgtTZXNzaW9uRGF0YRILCgNzaWQYAiABKAkiMQoPTWF0Y2ht",
          "YWtpbmdEYXRhEh4KBFR5cGUYASABKA4yEC5NYXRjaG1ha2luZ1Jvb20iWAoR",
          "Q29tbW9uQWNjb3VudERhdGESEAoIdXNlcm5hbWUYASABKAkSFAoMdmlydHVh",
          "bE1vbmV5GAIgASgFEhsKE3ZpcnR1YWxTcGVjaWFsTW9uZXkYAyABKAUiuAEK",
          "CFJvb21EYXRhEhYKBFJvb20YASABKAsyCC5NU1NSb29tEiMKClBsYXllcklu",
          "Zm8YAiABKAsyDy5Sb29tUGxheWVySW5mbxIuChVQbGF5ZXJSZWFkeVN0YXR1",
          "c0luZm8YAyABKAsyDy5Sb29tUGxheWVySW5mbxIjCgpQbGF5ZXJMaXN0GAQg",
          "AygLMg8uUm9vbVBsYXllckluZm8SGgoIUm9vbUxpc3QYBSADKAsyCC5NU1NS",
          "b29tIrABCgdNU1NSb29tEgoKAklkGAEgASgJEhMKC2NyZWF0ZWRUaW1lGAIg",
          "ASgDEhMKC3VwZGF0ZWRUaW1lGAMgASgDEhEKCWlzUHJpdmF0ZRgEIAEoCBIP",
          "Cgdpc093bmVyGAUgASgIEgwKBG5hbWUYBiABKAkSFAoMbWF4VXNlckNvdW50",
          "GAcgASgFEhgKEGN1cnJlbnRVc2VyQ291bnQYCCABKAUSDQoFVGVhbXMYCSAD",
          "KAkipgEKDlJvb21QbGF5ZXJJbmZvEhAKCFVzZXJuYW1lGAEgASgJEg4KBlRl",
          "YW1JZBgCIAEoCRIWCg5Jc0pvaW5lZFRvVGVhbRgDIAEoCBIPCgdJc1JlYWR5",
          "GAQgASgIEhAKCElzTGVhZGVyGAUgASgIEiUKDkN1cnJlbnRHT2JqZWN0GAYg",
          "ASgLMg0uUGxheWVyT2JqZWN0EhAKCE9iamVjdElkGAcgASgFIjEKC0FjY291",
          "bnREYXRhEhAKCHVzZXJuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJIjEK",
          "DFVwZGF0ZUdPTGlzdBIhCgpwbGF5ZXJMaXN0GAEgAygLMg0uUGxheWVyT2Jq",
          "ZWN0IlwKDE9iamVjdEFjdGlvbhIjCg1jdXJyZW50T2JqZWN0GAEgASgLMgwu",
          "c0dhbWVPYmplY3QSJwoRaW50ZXJhY3RlZE9iamVjdHMYAiADKAsyDC5zR2Ft",
          "ZU9iamVjdCJDCgpDbGllbnREYXRhEgsKA3ZlchgBIAEoCRIUCgxtYWNoaW5l",
          "X25hbWUYAiABKAkSEgoKbWFjaGluZV9pZBgDIAEoCSJHCgtzR2FtZU9iamVj",
          "dBILCgNvaWQYASABKAUSDQoFcG9zX3gYAiABKAISDQoFcG9zX3kYAyABKAIS",
          "DQoFcG9zX3oYBCABKAIiwwIKDFBsYXllck9iamVjdBIcCgZwQ2xhc3MYASAB",
          "KA4yDC5QbGF5ZXJDbGFzcxIRCgljdXJyZW50SHAYAiABKAUSDQoFbWF4SHAY",
          "AyABKAUSEAoIc3RyZW5ndGgYBCABKAUSEQoJZGV4dGVyaXR5GAUgASgFEhQK",
          "DGludGVsbGlnZW5jZRgGIAEoBRIfChdsYXN0UHJvY2Vzc2VkU2VxdWVuY2VJ",
          "RBgHIAEoBRINCgVwb3NfeBgIIAEoAhINCgVwb3NfeRgJIAEoAhINCgVwb3Nf",
          "ehgKIAEoAhITCgthdHRhY2tTcGVlZBgLIAEoAhIVCg1tb3ZlbWVudFNwZWVk",
          "GAwgASgCEiMKDHBsYXllcklucHV0cxgNIAMoCzINLlNQbGF5ZXJJbnB1dBIL",
          "CgNPaWQYDiABKAUSDAoETmFtZRgPIAEoCSKHAQoMU1BsYXllcklucHV0EiMK",
          "C3BsYXllckV2ZW50GAEgASgOMg4uTVNQbGF5ZXJFdmVudBINCgVwb3NfeBgC",
          "IAEoAhINCgVwb3NfeRgDIAEoAhINCgVwb3NfehgEIAEoAhIRCgl0aW1lc3Rh",
          "bXAYBSABKAISEgoKc2VxdWVuY2VJRBgGIAEoBSoxCg1NU0Jhc2VFdmVudElk",
          "Eg8KC1BsYXllckV2ZW50EAASDwoLU2VydmVyRXZlbnQQASpuCg1NU1BsYXll",
          "ckV2ZW50EhAKDFdPUkxEX1VQREFURRAAEg8KC1JPT01fVVBEQVRFEAESCAoE",
          "TU9WRRACEgoKBkFUVEFDSxADEggKBERFQUQQBBIHCgNVU0UQBRIRCg1DUkVB",
          "VEVfUExBWUVSEAYqrAQKDU1TU2VydmVyRXZlbnQSEAoMQUNDT1VOVF9KT0lO",
          "EAASFwoTQUNDT1VOVF9KT0lOX0ZBSUxFRBABEhIKDlBVQkxJQ19NRVNTQUdF",
          "EAISDQoJUk9PTV9KT0lOEAMSDgoKUk9PTV9MRUFWRRAEEhUKEVJPT01fTEVB",
          "VkVfRkFJTEVEEAUSDwoLUk9PTV9DUkVBVEUQBhIPCgtST09NX0RFTEVURRAH",
          "EhQKEFJPT01fUExBWUVSX0xFRlQQCBIWChJST09NX1BMQVlFUl9KT0lORUQQ",
          "CRIUChBST09NX0pPSU5fRkFJTEVEEAoSFgoSUk9PTV9DUkVBVEVfRkFJTEVE",
          "EAsSFgoSUk9PTV9ERUxFVEVfRkFJTEVEEAwSFAoQUk9PTV9HRVRfUExBWUVS",
          "UxANEhMKD1JPT01fR0FNRV9TVEFSVBAOEhYKElJPT01fQ0hBTkdFX0xFQURF",
          "UhAPEhwKGFJPT01fUExBWUVSX1JFQURZX1NUQVRVUxAQEiMKH1JPT01fUExB",
          "WUVSX1JFQURZX1NUQVRVU19GQUlMRUQQERIQCgxNRVNTQUdFX1NFTkQQEhIT",
          "Cg9NRVNTQUdFX1JFQ0lFVkUQExIVChFMT0JCWV9NQVRDSE1BS0lORxAUEg4K",
          "CkNPTk5FQ1RJT04QFhIVChFDT05ORUNUSU9OX0ZBSUxFRBAXEhMKD0NPTk5F",
          "Q1RJT05fTE9TVBAYEhAKDFBJTkdfUkVRVUVTVBAZKiUKD01hdGNobWFraW5n",
          "Um9vbRIICgRCR18yEAASCAoEQkdfNBABKv4BChBTaGlmdFNlcnZlckVycm9y",
          "EhIKDkNMSUVOVF9WRVJfT0xEEAASDwoLQkFEX1NFU1NJT04QARISCg5ST09N",
          "X05PVF9GT1VORBACEhMKD0FMUkVBRFlfSU5fUk9PTRADEhsKF1dST05HX0xP",
          "R0lOX0NSRURFTlRJQUxTEAQSFQoRV1JPTkdfQ0xJRU5UX0RBVEEQBRIVChFO",
          "T19SRVNQT05EX1NFUlZFUhAGEhUKEVJPT01fQVVUSF9QUk9CTEVNEAcSEwoP",
          "Tk9UX0lOX0FOWV9ST09NEAgSDQoJUk9PTV9GVUxMEAkSFgoSTUFUQ0hNQUtJ",
          "TkdfRkFJTEVEEAoqNQoNU2hpZnRSb29tVHlwZRIJCgVMT0JCWRAAEgcKA01N",
          "TxABEhAKDEFDVElPTkJBVFRMRRACKjwKC1BsYXllckNsYXNzEgsKB1dhcnJp",
          "b3IQABIKCgZBcmNoZXIQARIICgRNYWdlEAISCgoGUHJpZXN0EANiBnByb3Rv",
          "Mw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MSBaseEventId), typeof(global::MSPlayerEvent), typeof(global::MSServerEvent), typeof(global::MatchmakingRoom), typeof(global::ShiftServerError), typeof(global::ShiftRoomType), typeof(global::PlayerClass), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ShiftServerData), global::ShiftServerData.Parser, new[]{ "Basevtid", "Svevtid", "Plevtid", "Session", "ClientInfo", "AccountData", "RoomData", "Account", "GoUpdatePacket", "Interaction", "PlayerInput", "SPlayerObject", "ErrorReason", "SessionID", "MatchmakingData", "TimeBetweenTicks", "CurrentServerTime", "SvTickRate" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionData), global::SessionData.Parser, new[]{ "Sid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MatchmakingData), global::MatchmakingData.Parser, new[]{ "Type" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CommonAccountData), global::CommonAccountData.Parser, new[]{ "Username", "VirtualMoney", "VirtualSpecialMoney" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomData), global::RoomData.Parser, new[]{ "Room", "PlayerInfo", "PlayerReadyStatusInfo", "PlayerList", "RoomList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MSSRoom), global::MSSRoom.Parser, new[]{ "Id", "CreatedTime", "UpdatedTime", "IsPrivate", "IsOwner", "Name", "MaxUserCount", "CurrentUserCount", "Teams" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomPlayerInfo), global::RoomPlayerInfo.Parser, new[]{ "Username", "TeamId", "IsJoinedToTeam", "IsReady", "IsLeader", "CurrentGObject", "ObjectId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountData), global::AccountData.Parser, new[]{ "Username", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateGOList), global::UpdateGOList.Parser, new[]{ "PlayerList" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectAction), global::ObjectAction.Parser, new[]{ "CurrentObject", "InteractedObjects" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientData), global::ClientData.Parser, new[]{ "Ver", "MachineName", "MachineId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sGameObject), global::sGameObject.Parser, new[]{ "Oid", "PosX", "PosY", "PosZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerObject), global::PlayerObject.Parser, new[]{ "PClass", "CurrentHp", "MaxHp", "Strength", "Dexterity", "Intelligence", "LastProcessedSequenceID", "PosX", "PosY", "PosZ", "AttackSpeed", "MovementSpeed", "PlayerInputs", "Oid", "Name" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SPlayerInput), global::SPlayerInput.Parser, new[]{ "PlayerEvent", "PosX", "PosY", "PosZ", "Timestamp", "SequenceID" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
//// Control message ID.
/// </summary>
public enum MSBaseEventId {
  [pbr::OriginalName("PlayerEvent")] PlayerEvent = 0,
  [pbr::OriginalName("ServerEvent")] ServerEvent = 1,
}

/// <summary>
//// Control message ID.
/// </summary>
public enum MSPlayerEvent {
  /// <summary>
  ///Interaction events
  /// </summary>
  [pbr::OriginalName("WORLD_UPDATE")] WorldUpdate = 0,
  [pbr::OriginalName("ROOM_UPDATE")] RoomUpdate = 1,
  [pbr::OriginalName("MOVE")] Move = 2,
  [pbr::OriginalName("ATTACK")] Attack = 3,
  [pbr::OriginalName("DEAD")] Dead = 4,
  [pbr::OriginalName("USE")] Use = 5,
  [pbr::OriginalName("CREATE_PLAYER")] CreatePlayer = 6,
}

public enum MSServerEvent {
  [pbr::OriginalName("ACCOUNT_JOIN")] AccountJoin = 0,
  [pbr::OriginalName("ACCOUNT_JOIN_FAILED")] AccountJoinFailed = 1,
  [pbr::OriginalName("PUBLIC_MESSAGE")] PublicMessage = 2,
  [pbr::OriginalName("ROOM_JOIN")] RoomJoin = 3,
  [pbr::OriginalName("ROOM_LEAVE")] RoomLeave = 4,
  [pbr::OriginalName("ROOM_LEAVE_FAILED")] RoomLeaveFailed = 5,
  [pbr::OriginalName("ROOM_CREATE")] RoomCreate = 6,
  [pbr::OriginalName("ROOM_DELETE")] RoomDelete = 7,
  [pbr::OriginalName("ROOM_PLAYER_LEFT")] RoomPlayerLeft = 8,
  [pbr::OriginalName("ROOM_PLAYER_JOINED")] RoomPlayerJoined = 9,
  [pbr::OriginalName("ROOM_JOIN_FAILED")] RoomJoinFailed = 10,
  [pbr::OriginalName("ROOM_CREATE_FAILED")] RoomCreateFailed = 11,
  [pbr::OriginalName("ROOM_DELETE_FAILED")] RoomDeleteFailed = 12,
  [pbr::OriginalName("ROOM_GET_PLAYERS")] RoomGetPlayers = 13,
  [pbr::OriginalName("ROOM_GAME_START")] RoomGameStart = 14,
  [pbr::OriginalName("ROOM_CHANGE_LEADER")] RoomChangeLeader = 15,
  [pbr::OriginalName("ROOM_PLAYER_READY_STATUS")] RoomPlayerReadyStatus = 16,
  [pbr::OriginalName("ROOM_PLAYER_READY_STATUS_FAILED")] RoomPlayerReadyStatusFailed = 17,
  [pbr::OriginalName("MESSAGE_SEND")] MessageSend = 18,
  [pbr::OriginalName("MESSAGE_RECIEVE")] MessageRecieve = 19,
  [pbr::OriginalName("LOBBY_MATCHMAKING")] LobbyMatchmaking = 20,
  [pbr::OriginalName("CONNECTION")] Connection = 22,
  [pbr::OriginalName("CONNECTION_FAILED")] ConnectionFailed = 23,
  [pbr::OriginalName("CONNECTION_LOST")] ConnectionLost = 24,
  [pbr::OriginalName("PING_REQUEST")] PingRequest = 25,
}

public enum MatchmakingRoom {
  [pbr::OriginalName("BG_2")] Bg2 = 0,
  [pbr::OriginalName("BG_4")] Bg4 = 1,
}

public enum ShiftServerError {
  /// <summary>
  /// Application.version
  /// </summary>
  [pbr::OriginalName("CLIENT_VER_OLD")] ClientVerOld = 0,
  /// <summary>
  /// Session
  /// </summary>
  [pbr::OriginalName("BAD_SESSION")] BadSession = 1,
  [pbr::OriginalName("ROOM_NOT_FOUND")] RoomNotFound = 2,
  [pbr::OriginalName("ALREADY_IN_ROOM")] AlreadyInRoom = 3,
  /// <summary>
  /// Wrong login credentials
  /// </summary>
  [pbr::OriginalName("WRONG_LOGIN_CREDENTIALS")] WrongLoginCredentials = 4,
  [pbr::OriginalName("WRONG_CLIENT_DATA")] WrongClientData = 5,
  [pbr::OriginalName("NO_RESPOND_SERVER")] NoRespondServer = 6,
  [pbr::OriginalName("ROOM_AUTH_PROBLEM")] RoomAuthProblem = 7,
  [pbr::OriginalName("NOT_IN_ANY_ROOM")] NotInAnyRoom = 8,
  [pbr::OriginalName("ROOM_FULL")] RoomFull = 9,
  [pbr::OriginalName("MATCHMAKING_FAILED")] MatchmakingFailed = 10,
}

public enum ShiftRoomType {
  [pbr::OriginalName("LOBBY")] Lobby = 0,
  [pbr::OriginalName("MMO")] Mmo = 1,
  [pbr::OriginalName("ACTIONBATTLE")] Actionbattle = 2,
}

public enum PlayerClass {
  [pbr::OriginalName("Warrior")] Warrior = 0,
  [pbr::OriginalName("Archer")] Archer = 1,
  [pbr::OriginalName("Mage")] Mage = 2,
  [pbr::OriginalName("Priest")] Priest = 3,
}

#endregion

#region Messages
public sealed partial class ShiftServerData : pb::IMessage<ShiftServerData> {
  private static readonly pb::MessageParser<ShiftServerData> _parser = new pb::MessageParser<ShiftServerData>(() => new ShiftServerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShiftServerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData(ShiftServerData other) : this() {
    basevtid_ = other.basevtid_;
    svevtid_ = other.svevtid_;
    plevtid_ = other.plevtid_;
    session_ = other.session_ != null ? other.session_.Clone() : null;
    clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
    accountData_ = other.accountData_ != null ? other.accountData_.Clone() : null;
    roomData_ = other.roomData_ != null ? other.roomData_.Clone() : null;
    account_ = other.account_ != null ? other.account_.Clone() : null;
    goUpdatePacket_ = other.goUpdatePacket_ != null ? other.goUpdatePacket_.Clone() : null;
    interaction_ = other.interaction_ != null ? other.interaction_.Clone() : null;
    playerInput_ = other.playerInput_ != null ? other.playerInput_.Clone() : null;
    sPlayerObject_ = other.sPlayerObject_ != null ? other.sPlayerObject_.Clone() : null;
    errorReason_ = other.errorReason_;
    sessionID_ = other.sessionID_;
    matchmakingData_ = other.matchmakingData_ != null ? other.matchmakingData_.Clone() : null;
    timeBetweenTicks_ = other.timeBetweenTicks_;
    currentServerTime_ = other.currentServerTime_;
    svTickRate_ = other.svTickRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData Clone() {
    return new ShiftServerData(this);
  }

  /// <summary>Field number for the "basevtid" field.</summary>
  public const int BasevtidFieldNumber = 1;
  private global::MSBaseEventId basevtid_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSBaseEventId Basevtid {
    get { return basevtid_; }
    set {
      basevtid_ = value;
    }
  }

  /// <summary>Field number for the "svevtid" field.</summary>
  public const int SvevtidFieldNumber = 2;
  private global::MSServerEvent svevtid_ = 0;
  /// <summary>
  /// Event type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSServerEvent Svevtid {
    get { return svevtid_; }
    set {
      svevtid_ = value;
    }
  }

  /// <summary>Field number for the "plevtid" field.</summary>
  public const int PlevtidFieldNumber = 3;
  private global::MSPlayerEvent plevtid_ = 0;
  /// <summary>
  /// Sub ev type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSPlayerEvent Plevtid {
    get { return plevtid_; }
    set {
      plevtid_ = value;
    }
  }

  /// <summary>Field number for the "Session" field.</summary>
  public const int SessionFieldNumber = 4;
  private global::SessionData session_;
  /// <summary>
  /// SessionData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SessionData Session {
    get { return session_; }
    set {
      session_ = value;
    }
  }

  /// <summary>Field number for the "ClientInfo" field.</summary>
  public const int ClientInfoFieldNumber = 5;
  private global::ClientData clientInfo_;
  /// <summary>
  /// ClientData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientData ClientInfo {
    get { return clientInfo_; }
    set {
      clientInfo_ = value;
    }
  }

  /// <summary>Field number for the "AccountData" field.</summary>
  public const int AccountDataFieldNumber = 6;
  private global::CommonAccountData accountData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CommonAccountData AccountData {
    get { return accountData_; }
    set {
      accountData_ = value;
    }
  }

  /// <summary>Field number for the "RoomData" field.</summary>
  public const int RoomDataFieldNumber = 7;
  private global::RoomData roomData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData RoomData {
    get { return roomData_; }
    set {
      roomData_ = value;
    }
  }

  /// <summary>Field number for the "Account" field.</summary>
  public const int AccountFieldNumber = 8;
  private global::AccountData account_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AccountData Account {
    get { return account_; }
    set {
      account_ = value;
    }
  }

  /// <summary>Field number for the "GoUpdatePacket" field.</summary>
  public const int GoUpdatePacketFieldNumber = 9;
  private global::UpdateGOList goUpdatePacket_;
  /// <summary>
  /// GameObjects list
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateGOList GoUpdatePacket {
    get { return goUpdatePacket_; }
    set {
      goUpdatePacket_ = value;
    }
  }

  /// <summary>Field number for the "Interaction" field.</summary>
  public const int InteractionFieldNumber = 10;
  private global::ObjectAction interaction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectAction Interaction {
    get { return interaction_; }
    set {
      interaction_ = value;
    }
  }

  /// <summary>Field number for the "PlayerInput" field.</summary>
  public const int PlayerInputFieldNumber = 11;
  private global::SPlayerInput playerInput_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SPlayerInput PlayerInput {
    get { return playerInput_; }
    set {
      playerInput_ = value;
    }
  }

  /// <summary>Field number for the "sPlayerObject" field.</summary>
  public const int SPlayerObjectFieldNumber = 12;
  private global::PlayerObject sPlayerObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerObject SPlayerObject {
    get { return sPlayerObject_; }
    set {
      sPlayerObject_ = value;
    }
  }

  /// <summary>Field number for the "ErrorReason" field.</summary>
  public const int ErrorReasonFieldNumber = 13;
  private global::ShiftServerError errorReason_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShiftServerError ErrorReason {
    get { return errorReason_; }
    set {
      errorReason_ = value;
    }
  }

  /// <summary>Field number for the "SessionID" field.</summary>
  public const int SessionIDFieldNumber = 14;
  private string sessionID_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionID {
    get { return sessionID_; }
    set {
      sessionID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "MatchmakingData" field.</summary>
  public const int MatchmakingDataFieldNumber = 15;
  private global::MatchmakingData matchmakingData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MatchmakingData MatchmakingData {
    get { return matchmakingData_; }
    set {
      matchmakingData_ = value;
    }
  }

  /// <summary>Field number for the "TimeBetweenTicks" field.</summary>
  public const int TimeBetweenTicksFieldNumber = 16;
  private double timeBetweenTicks_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TimeBetweenTicks {
    get { return timeBetweenTicks_; }
    set {
      timeBetweenTicks_ = value;
    }
  }

  /// <summary>Field number for the "CurrentServerTime" field.</summary>
  public const int CurrentServerTimeFieldNumber = 17;
  private double currentServerTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double CurrentServerTime {
    get { return currentServerTime_; }
    set {
      currentServerTime_ = value;
    }
  }

  /// <summary>Field number for the "svTickRate" field.</summary>
  public const int SvTickRateFieldNumber = 18;
  private int svTickRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SvTickRate {
    get { return svTickRate_; }
    set {
      svTickRate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShiftServerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShiftServerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Basevtid != other.Basevtid) return false;
    if (Svevtid != other.Svevtid) return false;
    if (Plevtid != other.Plevtid) return false;
    if (!object.Equals(Session, other.Session)) return false;
    if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
    if (!object.Equals(AccountData, other.AccountData)) return false;
    if (!object.Equals(RoomData, other.RoomData)) return false;
    if (!object.Equals(Account, other.Account)) return false;
    if (!object.Equals(GoUpdatePacket, other.GoUpdatePacket)) return false;
    if (!object.Equals(Interaction, other.Interaction)) return false;
    if (!object.Equals(PlayerInput, other.PlayerInput)) return false;
    if (!object.Equals(SPlayerObject, other.SPlayerObject)) return false;
    if (ErrorReason != other.ErrorReason) return false;
    if (SessionID != other.SessionID) return false;
    if (!object.Equals(MatchmakingData, other.MatchmakingData)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TimeBetweenTicks, other.TimeBetweenTicks)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(CurrentServerTime, other.CurrentServerTime)) return false;
    if (SvTickRate != other.SvTickRate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Basevtid != 0) hash ^= Basevtid.GetHashCode();
    if (Svevtid != 0) hash ^= Svevtid.GetHashCode();
    if (Plevtid != 0) hash ^= Plevtid.GetHashCode();
    if (session_ != null) hash ^= Session.GetHashCode();
    if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
    if (accountData_ != null) hash ^= AccountData.GetHashCode();
    if (roomData_ != null) hash ^= RoomData.GetHashCode();
    if (account_ != null) hash ^= Account.GetHashCode();
    if (goUpdatePacket_ != null) hash ^= GoUpdatePacket.GetHashCode();
    if (interaction_ != null) hash ^= Interaction.GetHashCode();
    if (playerInput_ != null) hash ^= PlayerInput.GetHashCode();
    if (sPlayerObject_ != null) hash ^= SPlayerObject.GetHashCode();
    if (ErrorReason != 0) hash ^= ErrorReason.GetHashCode();
    if (SessionID.Length != 0) hash ^= SessionID.GetHashCode();
    if (matchmakingData_ != null) hash ^= MatchmakingData.GetHashCode();
    if (TimeBetweenTicks != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TimeBetweenTicks);
    if (CurrentServerTime != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(CurrentServerTime);
    if (SvTickRate != 0) hash ^= SvTickRate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Basevtid != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Basevtid);
    }
    if (Svevtid != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Svevtid);
    }
    if (Plevtid != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Plevtid);
    }
    if (session_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Session);
    }
    if (clientInfo_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ClientInfo);
    }
    if (accountData_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(AccountData);
    }
    if (roomData_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(RoomData);
    }
    if (account_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Account);
    }
    if (goUpdatePacket_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(GoUpdatePacket);
    }
    if (interaction_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Interaction);
    }
    if (playerInput_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(PlayerInput);
    }
    if (sPlayerObject_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(SPlayerObject);
    }
    if (ErrorReason != 0) {
      output.WriteRawTag(104);
      output.WriteEnum((int) ErrorReason);
    }
    if (SessionID.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(SessionID);
    }
    if (matchmakingData_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(MatchmakingData);
    }
    if (TimeBetweenTicks != 0D) {
      output.WriteRawTag(129, 1);
      output.WriteDouble(TimeBetweenTicks);
    }
    if (CurrentServerTime != 0D) {
      output.WriteRawTag(137, 1);
      output.WriteDouble(CurrentServerTime);
    }
    if (SvTickRate != 0) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(SvTickRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Basevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Basevtid);
    }
    if (Svevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Svevtid);
    }
    if (Plevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Plevtid);
    }
    if (session_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
    }
    if (clientInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
    }
    if (accountData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountData);
    }
    if (roomData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomData);
    }
    if (account_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
    }
    if (goUpdatePacket_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GoUpdatePacket);
    }
    if (interaction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interaction);
    }
    if (playerInput_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInput);
    }
    if (sPlayerObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SPlayerObject);
    }
    if (ErrorReason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorReason);
    }
    if (SessionID.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionID);
    }
    if (matchmakingData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MatchmakingData);
    }
    if (TimeBetweenTicks != 0D) {
      size += 2 + 8;
    }
    if (CurrentServerTime != 0D) {
      size += 2 + 8;
    }
    if (SvTickRate != 0) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SvTickRate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShiftServerData other) {
    if (other == null) {
      return;
    }
    if (other.Basevtid != 0) {
      Basevtid = other.Basevtid;
    }
    if (other.Svevtid != 0) {
      Svevtid = other.Svevtid;
    }
    if (other.Plevtid != 0) {
      Plevtid = other.Plevtid;
    }
    if (other.session_ != null) {
      if (session_ == null) {
        session_ = new global::SessionData();
      }
      Session.MergeFrom(other.Session);
    }
    if (other.clientInfo_ != null) {
      if (clientInfo_ == null) {
        clientInfo_ = new global::ClientData();
      }
      ClientInfo.MergeFrom(other.ClientInfo);
    }
    if (other.accountData_ != null) {
      if (accountData_ == null) {
        accountData_ = new global::CommonAccountData();
      }
      AccountData.MergeFrom(other.AccountData);
    }
    if (other.roomData_ != null) {
      if (roomData_ == null) {
        roomData_ = new global::RoomData();
      }
      RoomData.MergeFrom(other.RoomData);
    }
    if (other.account_ != null) {
      if (account_ == null) {
        account_ = new global::AccountData();
      }
      Account.MergeFrom(other.Account);
    }
    if (other.goUpdatePacket_ != null) {
      if (goUpdatePacket_ == null) {
        goUpdatePacket_ = new global::UpdateGOList();
      }
      GoUpdatePacket.MergeFrom(other.GoUpdatePacket);
    }
    if (other.interaction_ != null) {
      if (interaction_ == null) {
        interaction_ = new global::ObjectAction();
      }
      Interaction.MergeFrom(other.Interaction);
    }
    if (other.playerInput_ != null) {
      if (playerInput_ == null) {
        playerInput_ = new global::SPlayerInput();
      }
      PlayerInput.MergeFrom(other.PlayerInput);
    }
    if (other.sPlayerObject_ != null) {
      if (sPlayerObject_ == null) {
        sPlayerObject_ = new global::PlayerObject();
      }
      SPlayerObject.MergeFrom(other.SPlayerObject);
    }
    if (other.ErrorReason != 0) {
      ErrorReason = other.ErrorReason;
    }
    if (other.SessionID.Length != 0) {
      SessionID = other.SessionID;
    }
    if (other.matchmakingData_ != null) {
      if (matchmakingData_ == null) {
        matchmakingData_ = new global::MatchmakingData();
      }
      MatchmakingData.MergeFrom(other.MatchmakingData);
    }
    if (other.TimeBetweenTicks != 0D) {
      TimeBetweenTicks = other.TimeBetweenTicks;
    }
    if (other.CurrentServerTime != 0D) {
      CurrentServerTime = other.CurrentServerTime;
    }
    if (other.SvTickRate != 0) {
      SvTickRate = other.SvTickRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          basevtid_ = (global::MSBaseEventId) input.ReadEnum();
          break;
        }
        case 16: {
          svevtid_ = (global::MSServerEvent) input.ReadEnum();
          break;
        }
        case 24: {
          plevtid_ = (global::MSPlayerEvent) input.ReadEnum();
          break;
        }
        case 34: {
          if (session_ == null) {
            session_ = new global::SessionData();
          }
          input.ReadMessage(session_);
          break;
        }
        case 42: {
          if (clientInfo_ == null) {
            clientInfo_ = new global::ClientData();
          }
          input.ReadMessage(clientInfo_);
          break;
        }
        case 50: {
          if (accountData_ == null) {
            accountData_ = new global::CommonAccountData();
          }
          input.ReadMessage(accountData_);
          break;
        }
        case 58: {
          if (roomData_ == null) {
            roomData_ = new global::RoomData();
          }
          input.ReadMessage(roomData_);
          break;
        }
        case 66: {
          if (account_ == null) {
            account_ = new global::AccountData();
          }
          input.ReadMessage(account_);
          break;
        }
        case 74: {
          if (goUpdatePacket_ == null) {
            goUpdatePacket_ = new global::UpdateGOList();
          }
          input.ReadMessage(goUpdatePacket_);
          break;
        }
        case 82: {
          if (interaction_ == null) {
            interaction_ = new global::ObjectAction();
          }
          input.ReadMessage(interaction_);
          break;
        }
        case 90: {
          if (playerInput_ == null) {
            playerInput_ = new global::SPlayerInput();
          }
          input.ReadMessage(playerInput_);
          break;
        }
        case 98: {
          if (sPlayerObject_ == null) {
            sPlayerObject_ = new global::PlayerObject();
          }
          input.ReadMessage(sPlayerObject_);
          break;
        }
        case 104: {
          errorReason_ = (global::ShiftServerError) input.ReadEnum();
          break;
        }
        case 114: {
          SessionID = input.ReadString();
          break;
        }
        case 122: {
          if (matchmakingData_ == null) {
            matchmakingData_ = new global::MatchmakingData();
          }
          input.ReadMessage(matchmakingData_);
          break;
        }
        case 129: {
          TimeBetweenTicks = input.ReadDouble();
          break;
        }
        case 137: {
          CurrentServerTime = input.ReadDouble();
          break;
        }
        case 144: {
          SvTickRate = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SessionData : pb::IMessage<SessionData> {
  private static readonly pb::MessageParser<SessionData> _parser = new pb::MessageParser<SessionData>(() => new SessionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData(SessionData other) : this() {
    sid_ = other.sid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData Clone() {
    return new SessionData(this);
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 2;
  private string sid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sid {
    get { return sid_; }
    set {
      sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sid != other.Sid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sid.Length != 0) hash ^= Sid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Sid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Sid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionData other) {
    if (other == null) {
      return;
    }
    if (other.Sid.Length != 0) {
      Sid = other.Sid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          Sid = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class MatchmakingData : pb::IMessage<MatchmakingData> {
  private static readonly pb::MessageParser<MatchmakingData> _parser = new pb::MessageParser<MatchmakingData>(() => new MatchmakingData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MatchmakingData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchmakingData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchmakingData(MatchmakingData other) : this() {
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MatchmakingData Clone() {
    return new MatchmakingData(this);
  }

  /// <summary>Field number for the "Type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::MatchmakingRoom type_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MatchmakingRoom Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MatchmakingData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MatchmakingData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != 0) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MatchmakingData other) {
    if (other == null) {
      return;
    }
    if (other.Type != 0) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          type_ = (global::MatchmakingRoom) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class CommonAccountData : pb::IMessage<CommonAccountData> {
  private static readonly pb::MessageParser<CommonAccountData> _parser = new pb::MessageParser<CommonAccountData>(() => new CommonAccountData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CommonAccountData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData(CommonAccountData other) : this() {
    username_ = other.username_;
    virtualMoney_ = other.virtualMoney_;
    virtualSpecialMoney_ = other.virtualSpecialMoney_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData Clone() {
    return new CommonAccountData(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "virtualMoney" field.</summary>
  public const int VirtualMoneyFieldNumber = 2;
  private int virtualMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VirtualMoney {
    get { return virtualMoney_; }
    set {
      virtualMoney_ = value;
    }
  }

  /// <summary>Field number for the "virtualSpecialMoney" field.</summary>
  public const int VirtualSpecialMoneyFieldNumber = 3;
  private int virtualSpecialMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VirtualSpecialMoney {
    get { return virtualSpecialMoney_; }
    set {
      virtualSpecialMoney_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CommonAccountData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CommonAccountData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (VirtualMoney != other.VirtualMoney) return false;
    if (VirtualSpecialMoney != other.VirtualSpecialMoney) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (VirtualMoney != 0) hash ^= VirtualMoney.GetHashCode();
    if (VirtualSpecialMoney != 0) hash ^= VirtualSpecialMoney.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (VirtualMoney != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(VirtualMoney);
    }
    if (VirtualSpecialMoney != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(VirtualSpecialMoney);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (VirtualMoney != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualMoney);
    }
    if (VirtualSpecialMoney != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualSpecialMoney);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CommonAccountData other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.VirtualMoney != 0) {
      VirtualMoney = other.VirtualMoney;
    }
    if (other.VirtualSpecialMoney != 0) {
      VirtualSpecialMoney = other.VirtualSpecialMoney;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 16: {
          VirtualMoney = input.ReadInt32();
          break;
        }
        case 24: {
          VirtualSpecialMoney = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomData : pb::IMessage<RoomData> {
  private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData(RoomData other) : this() {
    room_ = other.room_ != null ? other.room_.Clone() : null;
    playerInfo_ = other.playerInfo_ != null ? other.playerInfo_.Clone() : null;
    playerReadyStatusInfo_ = other.playerReadyStatusInfo_ != null ? other.playerReadyStatusInfo_.Clone() : null;
    playerList_ = other.playerList_.Clone();
    roomList_ = other.roomList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData Clone() {
    return new RoomData(this);
  }

  /// <summary>Field number for the "Room" field.</summary>
  public const int RoomFieldNumber = 1;
  private global::MSSRoom room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSSRoom Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "PlayerInfo" field.</summary>
  public const int PlayerInfoFieldNumber = 2;
  private global::RoomPlayerInfo playerInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomPlayerInfo PlayerInfo {
    get { return playerInfo_; }
    set {
      playerInfo_ = value;
    }
  }

  /// <summary>Field number for the "PlayerReadyStatusInfo" field.</summary>
  public const int PlayerReadyStatusInfoFieldNumber = 3;
  private global::RoomPlayerInfo playerReadyStatusInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomPlayerInfo PlayerReadyStatusInfo {
    get { return playerReadyStatusInfo_; }
    set {
      playerReadyStatusInfo_ = value;
    }
  }

  /// <summary>Field number for the "PlayerList" field.</summary>
  public const int PlayerListFieldNumber = 4;
  private static readonly pb::FieldCodec<global::RoomPlayerInfo> _repeated_playerList_codec
      = pb::FieldCodec.ForMessage(34, global::RoomPlayerInfo.Parser);
  private readonly pbc::RepeatedField<global::RoomPlayerInfo> playerList_ = new pbc::RepeatedField<global::RoomPlayerInfo>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RoomPlayerInfo> PlayerList {
    get { return playerList_; }
  }

  /// <summary>Field number for the "RoomList" field.</summary>
  public const int RoomListFieldNumber = 5;
  private static readonly pb::FieldCodec<global::MSSRoom> _repeated_roomList_codec
      = pb::FieldCodec.ForMessage(42, global::MSSRoom.Parser);
  private readonly pbc::RepeatedField<global::MSSRoom> roomList_ = new pbc::RepeatedField<global::MSSRoom>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MSSRoom> RoomList {
    get { return roomList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Room, other.Room)) return false;
    if (!object.Equals(PlayerInfo, other.PlayerInfo)) return false;
    if (!object.Equals(PlayerReadyStatusInfo, other.PlayerReadyStatusInfo)) return false;
    if(!playerList_.Equals(other.playerList_)) return false;
    if(!roomList_.Equals(other.roomList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (room_ != null) hash ^= Room.GetHashCode();
    if (playerInfo_ != null) hash ^= PlayerInfo.GetHashCode();
    if (playerReadyStatusInfo_ != null) hash ^= PlayerReadyStatusInfo.GetHashCode();
    hash ^= playerList_.GetHashCode();
    hash ^= roomList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (room_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Room);
    }
    if (playerInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(PlayerInfo);
    }
    if (playerReadyStatusInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(PlayerReadyStatusInfo);
    }
    playerList_.WriteTo(output, _repeated_playerList_codec);
    roomList_.WriteTo(output, _repeated_roomList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (playerInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
    }
    if (playerReadyStatusInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerReadyStatusInfo);
    }
    size += playerList_.CalculateSize(_repeated_playerList_codec);
    size += roomList_.CalculateSize(_repeated_roomList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomData other) {
    if (other == null) {
      return;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        room_ = new global::MSSRoom();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.playerInfo_ != null) {
      if (playerInfo_ == null) {
        playerInfo_ = new global::RoomPlayerInfo();
      }
      PlayerInfo.MergeFrom(other.PlayerInfo);
    }
    if (other.playerReadyStatusInfo_ != null) {
      if (playerReadyStatusInfo_ == null) {
        playerReadyStatusInfo_ = new global::RoomPlayerInfo();
      }
      PlayerReadyStatusInfo.MergeFrom(other.PlayerReadyStatusInfo);
    }
    playerList_.Add(other.playerList_);
    roomList_.Add(other.roomList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (room_ == null) {
            room_ = new global::MSSRoom();
          }
          input.ReadMessage(room_);
          break;
        }
        case 18: {
          if (playerInfo_ == null) {
            playerInfo_ = new global::RoomPlayerInfo();
          }
          input.ReadMessage(playerInfo_);
          break;
        }
        case 26: {
          if (playerReadyStatusInfo_ == null) {
            playerReadyStatusInfo_ = new global::RoomPlayerInfo();
          }
          input.ReadMessage(playerReadyStatusInfo_);
          break;
        }
        case 34: {
          playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
          break;
        }
        case 42: {
          roomList_.AddEntriesFrom(input, _repeated_roomList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class MSSRoom : pb::IMessage<MSSRoom> {
  private static readonly pb::MessageParser<MSSRoom> _parser = new pb::MessageParser<MSSRoom>(() => new MSSRoom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MSSRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MSSRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MSSRoom(MSSRoom other) : this() {
    id_ = other.id_;
    createdTime_ = other.createdTime_;
    updatedTime_ = other.updatedTime_;
    isPrivate_ = other.isPrivate_;
    isOwner_ = other.isOwner_;
    name_ = other.name_;
    maxUserCount_ = other.maxUserCount_;
    currentUserCount_ = other.currentUserCount_;
    teams_ = other.teams_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MSSRoom Clone() {
    return new MSSRoom(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdTime" field.</summary>
  public const int CreatedTimeFieldNumber = 2;
  private long createdTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CreatedTime {
    get { return createdTime_; }
    set {
      createdTime_ = value;
    }
  }

  /// <summary>Field number for the "updatedTime" field.</summary>
  public const int UpdatedTimeFieldNumber = 3;
  private long updatedTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long UpdatedTime {
    get { return updatedTime_; }
    set {
      updatedTime_ = value;
    }
  }

  /// <summary>Field number for the "isPrivate" field.</summary>
  public const int IsPrivateFieldNumber = 4;
  private bool isPrivate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPrivate {
    get { return isPrivate_; }
    set {
      isPrivate_ = value;
    }
  }

  /// <summary>Field number for the "isOwner" field.</summary>
  public const int IsOwnerFieldNumber = 5;
  private bool isOwner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOwner {
    get { return isOwner_; }
    set {
      isOwner_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 6;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "maxUserCount" field.</summary>
  public const int MaxUserCountFieldNumber = 7;
  private int maxUserCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxUserCount {
    get { return maxUserCount_; }
    set {
      maxUserCount_ = value;
    }
  }

  /// <summary>Field number for the "currentUserCount" field.</summary>
  public const int CurrentUserCountFieldNumber = 8;
  private int currentUserCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentUserCount {
    get { return currentUserCount_; }
    set {
      currentUserCount_ = value;
    }
  }

  /// <summary>Field number for the "Teams" field.</summary>
  public const int TeamsFieldNumber = 9;
  private static readonly pb::FieldCodec<string> _repeated_teams_codec
      = pb::FieldCodec.ForString(74);
  private readonly pbc::RepeatedField<string> teams_ = new pbc::RepeatedField<string>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> Teams {
    get { return teams_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MSSRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MSSRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (CreatedTime != other.CreatedTime) return false;
    if (UpdatedTime != other.UpdatedTime) return false;
    if (IsPrivate != other.IsPrivate) return false;
    if (IsOwner != other.IsOwner) return false;
    if (Name != other.Name) return false;
    if (MaxUserCount != other.MaxUserCount) return false;
    if (CurrentUserCount != other.CurrentUserCount) return false;
    if(!teams_.Equals(other.teams_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (CreatedTime != 0L) hash ^= CreatedTime.GetHashCode();
    if (UpdatedTime != 0L) hash ^= UpdatedTime.GetHashCode();
    if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
    if (IsOwner != false) hash ^= IsOwner.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
    if (CurrentUserCount != 0) hash ^= CurrentUserCount.GetHashCode();
    hash ^= teams_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (CreatedTime != 0L) {
      output.WriteRawTag(16);
      output.WriteInt64(CreatedTime);
    }
    if (UpdatedTime != 0L) {
      output.WriteRawTag(24);
      output.WriteInt64(UpdatedTime);
    }
    if (IsPrivate != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsPrivate);
    }
    if (IsOwner != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsOwner);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Name);
    }
    if (MaxUserCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(MaxUserCount);
    }
    if (CurrentUserCount != 0) {
      output.WriteRawTag(64);
      output.WriteInt32(CurrentUserCount);
    }
    teams_.WriteTo(output, _repeated_teams_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (CreatedTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreatedTime);
    }
    if (UpdatedTime != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(UpdatedTime);
    }
    if (IsPrivate != false) {
      size += 1 + 1;
    }
    if (IsOwner != false) {
      size += 1 + 1;
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (MaxUserCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserCount);
    }
    if (CurrentUserCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentUserCount);
    }
    size += teams_.CalculateSize(_repeated_teams_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MSSRoom other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.CreatedTime != 0L) {
      CreatedTime = other.CreatedTime;
    }
    if (other.UpdatedTime != 0L) {
      UpdatedTime = other.UpdatedTime;
    }
    if (other.IsPrivate != false) {
      IsPrivate = other.IsPrivate;
    }
    if (other.IsOwner != false) {
      IsOwner = other.IsOwner;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.MaxUserCount != 0) {
      MaxUserCount = other.MaxUserCount;
    }
    if (other.CurrentUserCount != 0) {
      CurrentUserCount = other.CurrentUserCount;
    }
    teams_.Add(other.teams_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          CreatedTime = input.ReadInt64();
          break;
        }
        case 24: {
          UpdatedTime = input.ReadInt64();
          break;
        }
        case 32: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 40: {
          IsOwner = input.ReadBool();
          break;
        }
        case 50: {
          Name = input.ReadString();
          break;
        }
        case 56: {
          MaxUserCount = input.ReadInt32();
          break;
        }
        case 64: {
          CurrentUserCount = input.ReadInt32();
          break;
        }
        case 74: {
          teams_.AddEntriesFrom(input, _repeated_teams_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class RoomPlayerInfo : pb::IMessage<RoomPlayerInfo> {
  private static readonly pb::MessageParser<RoomPlayerInfo> _parser = new pb::MessageParser<RoomPlayerInfo>(() => new RoomPlayerInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomPlayerInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPlayerInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPlayerInfo(RoomPlayerInfo other) : this() {
    username_ = other.username_;
    teamId_ = other.teamId_;
    isJoinedToTeam_ = other.isJoinedToTeam_;
    isReady_ = other.isReady_;
    isLeader_ = other.isLeader_;
    currentGObject_ = other.currentGObject_ != null ? other.currentGObject_.Clone() : null;
    objectId_ = other.objectId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomPlayerInfo Clone() {
    return new RoomPlayerInfo(this);
  }

  /// <summary>Field number for the "Username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "TeamId" field.</summary>
  public const int TeamIdFieldNumber = 2;
  private string teamId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TeamId {
    get { return teamId_; }
    set {
      teamId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "IsJoinedToTeam" field.</summary>
  public const int IsJoinedToTeamFieldNumber = 3;
  private bool isJoinedToTeam_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsJoinedToTeam {
    get { return isJoinedToTeam_; }
    set {
      isJoinedToTeam_ = value;
    }
  }

  /// <summary>Field number for the "IsReady" field.</summary>
  public const int IsReadyFieldNumber = 4;
  private bool isReady_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsReady {
    get { return isReady_; }
    set {
      isReady_ = value;
    }
  }

  /// <summary>Field number for the "IsLeader" field.</summary>
  public const int IsLeaderFieldNumber = 5;
  private bool isLeader_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsLeader {
    get { return isLeader_; }
    set {
      isLeader_ = value;
    }
  }

  /// <summary>Field number for the "CurrentGObject" field.</summary>
  public const int CurrentGObjectFieldNumber = 6;
  private global::PlayerObject currentGObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerObject CurrentGObject {
    get { return currentGObject_; }
    set {
      currentGObject_ = value;
    }
  }

  /// <summary>Field number for the "ObjectId" field.</summary>
  public const int ObjectIdFieldNumber = 7;
  private int objectId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ObjectId {
    get { return objectId_; }
    set {
      objectId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomPlayerInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomPlayerInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (TeamId != other.TeamId) return false;
    if (IsJoinedToTeam != other.IsJoinedToTeam) return false;
    if (IsReady != other.IsReady) return false;
    if (IsLeader != other.IsLeader) return false;
    if (!object.Equals(CurrentGObject, other.CurrentGObject)) return false;
    if (ObjectId != other.ObjectId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (TeamId.Length != 0) hash ^= TeamId.GetHashCode();
    if (IsJoinedToTeam != false) hash ^= IsJoinedToTeam.GetHashCode();
    if (IsReady != false) hash ^= IsReady.GetHashCode();
    if (IsLeader != false) hash ^= IsLeader.GetHashCode();
    if (currentGObject_ != null) hash ^= CurrentGObject.GetHashCode();
    if (ObjectId != 0) hash ^= ObjectId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (TeamId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TeamId);
    }
    if (IsJoinedToTeam != false) {
      output.WriteRawTag(24);
      output.WriteBool(IsJoinedToTeam);
    }
    if (IsReady != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsReady);
    }
    if (IsLeader != false) {
      output.WriteRawTag(40);
      output.WriteBool(IsLeader);
    }
    if (currentGObject_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(CurrentGObject);
    }
    if (ObjectId != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(ObjectId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (TeamId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TeamId);
    }
    if (IsJoinedToTeam != false) {
      size += 1 + 1;
    }
    if (IsReady != false) {
      size += 1 + 1;
    }
    if (IsLeader != false) {
      size += 1 + 1;
    }
    if (currentGObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentGObject);
    }
    if (ObjectId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObjectId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomPlayerInfo other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.TeamId.Length != 0) {
      TeamId = other.TeamId;
    }
    if (other.IsJoinedToTeam != false) {
      IsJoinedToTeam = other.IsJoinedToTeam;
    }
    if (other.IsReady != false) {
      IsReady = other.IsReady;
    }
    if (other.IsLeader != false) {
      IsLeader = other.IsLeader;
    }
    if (other.currentGObject_ != null) {
      if (currentGObject_ == null) {
        currentGObject_ = new global::PlayerObject();
      }
      CurrentGObject.MergeFrom(other.CurrentGObject);
    }
    if (other.ObjectId != 0) {
      ObjectId = other.ObjectId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          TeamId = input.ReadString();
          break;
        }
        case 24: {
          IsJoinedToTeam = input.ReadBool();
          break;
        }
        case 32: {
          IsReady = input.ReadBool();
          break;
        }
        case 40: {
          IsLeader = input.ReadBool();
          break;
        }
        case 50: {
          if (currentGObject_ == null) {
            currentGObject_ = new global::PlayerObject();
          }
          input.ReadMessage(currentGObject_);
          break;
        }
        case 56: {
          ObjectId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AccountData : pb::IMessage<AccountData> {
  private static readonly pb::MessageParser<AccountData> _parser = new pb::MessageParser<AccountData>(() => new AccountData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData(AccountData other) : this() {
    username_ = other.username_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData Clone() {
    return new AccountData(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountData other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateGOList : pb::IMessage<UpdateGOList> {
  private static readonly pb::MessageParser<UpdateGOList> _parser = new pb::MessageParser<UpdateGOList>(() => new UpdateGOList());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateGOList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateGOList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateGOList(UpdateGOList other) : this() {
    playerList_ = other.playerList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateGOList Clone() {
    return new UpdateGOList(this);
  }

  /// <summary>Field number for the "playerList" field.</summary>
  public const int PlayerListFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PlayerObject> _repeated_playerList_codec
      = pb::FieldCodec.ForMessage(10, global::PlayerObject.Parser);
  private readonly pbc::RepeatedField<global::PlayerObject> playerList_ = new pbc::RepeatedField<global::PlayerObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerObject> PlayerList {
    get { return playerList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateGOList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateGOList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerList_.Equals(other.playerList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    playerList_.WriteTo(output, _repeated_playerList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += playerList_.CalculateSize(_repeated_playerList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateGOList other) {
    if (other == null) {
      return;
    }
    playerList_.Add(other.playerList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          playerList_.AddEntriesFrom(input, _repeated_playerList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectAction : pb::IMessage<ObjectAction> {
  private static readonly pb::MessageParser<ObjectAction> _parser = new pb::MessageParser<ObjectAction>(() => new ObjectAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction(ObjectAction other) : this() {
    currentObject_ = other.currentObject_ != null ? other.currentObject_.Clone() : null;
    interactedObjects_ = other.interactedObjects_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction Clone() {
    return new ObjectAction(this);
  }

  /// <summary>Field number for the "currentObject" field.</summary>
  public const int CurrentObjectFieldNumber = 1;
  private global::sGameObject currentObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::sGameObject CurrentObject {
    get { return currentObject_; }
    set {
      currentObject_ = value;
    }
  }

  /// <summary>Field number for the "interactedObjects" field.</summary>
  public const int InteractedObjectsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::sGameObject> _repeated_interactedObjects_codec
      = pb::FieldCodec.ForMessage(18, global::sGameObject.Parser);
  private readonly pbc::RepeatedField<global::sGameObject> interactedObjects_ = new pbc::RepeatedField<global::sGameObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::sGameObject> InteractedObjects {
    get { return interactedObjects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CurrentObject, other.CurrentObject)) return false;
    if(!interactedObjects_.Equals(other.interactedObjects_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (currentObject_ != null) hash ^= CurrentObject.GetHashCode();
    hash ^= interactedObjects_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (currentObject_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CurrentObject);
    }
    interactedObjects_.WriteTo(output, _repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (currentObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentObject);
    }
    size += interactedObjects_.CalculateSize(_repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectAction other) {
    if (other == null) {
      return;
    }
    if (other.currentObject_ != null) {
      if (currentObject_ == null) {
        currentObject_ = new global::sGameObject();
      }
      CurrentObject.MergeFrom(other.CurrentObject);
    }
    interactedObjects_.Add(other.interactedObjects_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (currentObject_ == null) {
            currentObject_ = new global::sGameObject();
          }
          input.ReadMessage(currentObject_);
          break;
        }
        case 18: {
          interactedObjects_.AddEntriesFrom(input, _repeated_interactedObjects_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClientData : pb::IMessage<ClientData> {
  private static readonly pb::MessageParser<ClientData> _parser = new pb::MessageParser<ClientData>(() => new ClientData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData(ClientData other) : this() {
    ver_ = other.ver_;
    machineName_ = other.machineName_;
    machineId_ = other.machineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData Clone() {
    return new ClientData(this);
  }

  /// <summary>Field number for the "ver" field.</summary>
  public const int VerFieldNumber = 1;
  private string ver_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ver {
    get { return ver_; }
    set {
      ver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_name" field.</summary>
  public const int MachineNameFieldNumber = 2;
  private string machineName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineName {
    get { return machineName_; }
    set {
      machineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_id" field.</summary>
  public const int MachineIdFieldNumber = 3;
  private string machineId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineId {
    get { return machineId_; }
    set {
      machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ver != other.Ver) return false;
    if (MachineName != other.MachineName) return false;
    if (MachineId != other.MachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ver.Length != 0) hash ^= Ver.GetHashCode();
    if (MachineName.Length != 0) hash ^= MachineName.GetHashCode();
    if (MachineId.Length != 0) hash ^= MachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ver.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ver);
    }
    if (MachineName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MachineName);
    }
    if (MachineId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ver.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ver);
    }
    if (MachineName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineName);
    }
    if (MachineId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientData other) {
    if (other == null) {
      return;
    }
    if (other.Ver.Length != 0) {
      Ver = other.Ver;
    }
    if (other.MachineName.Length != 0) {
      MachineName = other.MachineName;
    }
    if (other.MachineId.Length != 0) {
      MachineId = other.MachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ver = input.ReadString();
          break;
        }
        case 18: {
          MachineName = input.ReadString();
          break;
        }
        case 26: {
          MachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class sGameObject : pb::IMessage<sGameObject> {
  private static readonly pb::MessageParser<sGameObject> _parser = new pb::MessageParser<sGameObject>(() => new sGameObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sGameObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject(sGameObject other) : this() {
    oid_ = other.oid_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject Clone() {
    return new sGameObject(this);
  }

  /// <summary>Field number for the "oid" field.</summary>
  public const int OidFieldNumber = 1;
  private int oid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oid {
    get { return oid_; }
    set {
      oid_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 2;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 3;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 4;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sGameObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sGameObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Oid != other.Oid) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Oid != 0) hash ^= Oid.GetHashCode();
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Oid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Oid);
    }
    if (PosX != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(PosZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Oid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sGameObject other) {
    if (other == null) {
      return;
    }
    if (other.Oid != 0) {
      Oid = other.Oid;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Oid = input.ReadInt32();
          break;
        }
        case 21: {
          PosX = input.ReadFloat();
          break;
        }
        case 29: {
          PosY = input.ReadFloat();
          break;
        }
        case 37: {
          PosZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerObject : pb::IMessage<PlayerObject> {
  private static readonly pb::MessageParser<PlayerObject> _parser = new pb::MessageParser<PlayerObject>(() => new PlayerObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject(PlayerObject other) : this() {
    pClass_ = other.pClass_;
    currentHp_ = other.currentHp_;
    maxHp_ = other.maxHp_;
    strength_ = other.strength_;
    dexterity_ = other.dexterity_;
    intelligence_ = other.intelligence_;
    lastProcessedSequenceID_ = other.lastProcessedSequenceID_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    attackSpeed_ = other.attackSpeed_;
    movementSpeed_ = other.movementSpeed_;
    playerInputs_ = other.playerInputs_.Clone();
    oid_ = other.oid_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject Clone() {
    return new PlayerObject(this);
  }

  /// <summary>Field number for the "pClass" field.</summary>
  public const int PClassFieldNumber = 1;
  private global::PlayerClass pClass_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerClass PClass {
    get { return pClass_; }
    set {
      pClass_ = value;
    }
  }

  /// <summary>Field number for the "currentHp" field.</summary>
  public const int CurrentHpFieldNumber = 2;
  private int currentHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentHp {
    get { return currentHp_; }
    set {
      currentHp_ = value;
    }
  }

  /// <summary>Field number for the "maxHp" field.</summary>
  public const int MaxHpFieldNumber = 3;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  /// <summary>Field number for the "strength" field.</summary>
  public const int StrengthFieldNumber = 4;
  private int strength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Strength {
    get { return strength_; }
    set {
      strength_ = value;
    }
  }

  /// <summary>Field number for the "dexterity" field.</summary>
  public const int DexterityFieldNumber = 5;
  private int dexterity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Dexterity {
    get { return dexterity_; }
    set {
      dexterity_ = value;
    }
  }

  /// <summary>Field number for the "intelligence" field.</summary>
  public const int IntelligenceFieldNumber = 6;
  private int intelligence_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Intelligence {
    get { return intelligence_; }
    set {
      intelligence_ = value;
    }
  }

  /// <summary>Field number for the "lastProcessedSequenceID" field.</summary>
  public const int LastProcessedSequenceIDFieldNumber = 7;
  private int lastProcessedSequenceID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LastProcessedSequenceID {
    get { return lastProcessedSequenceID_; }
    set {
      lastProcessedSequenceID_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 8;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 9;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 10;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "attackSpeed" field.</summary>
  public const int AttackSpeedFieldNumber = 11;
  private float attackSpeed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float AttackSpeed {
    get { return attackSpeed_; }
    set {
      attackSpeed_ = value;
    }
  }

  /// <summary>Field number for the "movementSpeed" field.</summary>
  public const int MovementSpeedFieldNumber = 12;
  private float movementSpeed_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float MovementSpeed {
    get { return movementSpeed_; }
    set {
      movementSpeed_ = value;
    }
  }

  /// <summary>Field number for the "playerInputs" field.</summary>
  public const int PlayerInputsFieldNumber = 13;
  private static readonly pb::FieldCodec<global::SPlayerInput> _repeated_playerInputs_codec
      = pb::FieldCodec.ForMessage(106, global::SPlayerInput.Parser);
  private readonly pbc::RepeatedField<global::SPlayerInput> playerInputs_ = new pbc::RepeatedField<global::SPlayerInput>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SPlayerInput> PlayerInputs {
    get { return playerInputs_; }
  }

  /// <summary>Field number for the "Oid" field.</summary>
  public const int OidFieldNumber = 14;
  private int oid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oid {
    get { return oid_; }
    set {
      oid_ = value;
    }
  }

  /// <summary>Field number for the "Name" field.</summary>
  public const int NameFieldNumber = 15;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PClass != other.PClass) return false;
    if (CurrentHp != other.CurrentHp) return false;
    if (MaxHp != other.MaxHp) return false;
    if (Strength != other.Strength) return false;
    if (Dexterity != other.Dexterity) return false;
    if (Intelligence != other.Intelligence) return false;
    if (LastProcessedSequenceID != other.LastProcessedSequenceID) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AttackSpeed, other.AttackSpeed)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MovementSpeed, other.MovementSpeed)) return false;
    if(!playerInputs_.Equals(other.playerInputs_)) return false;
    if (Oid != other.Oid) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PClass != 0) hash ^= PClass.GetHashCode();
    if (CurrentHp != 0) hash ^= CurrentHp.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    if (Strength != 0) hash ^= Strength.GetHashCode();
    if (Dexterity != 0) hash ^= Dexterity.GetHashCode();
    if (Intelligence != 0) hash ^= Intelligence.GetHashCode();
    if (LastProcessedSequenceID != 0) hash ^= LastProcessedSequenceID.GetHashCode();
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (AttackSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AttackSpeed);
    if (MovementSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MovementSpeed);
    hash ^= playerInputs_.GetHashCode();
    if (Oid != 0) hash ^= Oid.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PClass != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PClass);
    }
    if (CurrentHp != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentHp);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MaxHp);
    }
    if (Strength != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Strength);
    }
    if (Dexterity != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Dexterity);
    }
    if (Intelligence != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(Intelligence);
    }
    if (LastProcessedSequenceID != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(LastProcessedSequenceID);
    }
    if (PosX != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(PosZ);
    }
    if (AttackSpeed != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(AttackSpeed);
    }
    if (MovementSpeed != 0F) {
      output.WriteRawTag(101);
      output.WriteFloat(MovementSpeed);
    }
    playerInputs_.WriteTo(output, _repeated_playerInputs_codec);
    if (Oid != 0) {
      output.WriteRawTag(112);
      output.WriteInt32(Oid);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PClass);
    }
    if (CurrentHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    if (Strength != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Strength);
    }
    if (Dexterity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dexterity);
    }
    if (Intelligence != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Intelligence);
    }
    if (LastProcessedSequenceID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LastProcessedSequenceID);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (AttackSpeed != 0F) {
      size += 1 + 4;
    }
    if (MovementSpeed != 0F) {
      size += 1 + 4;
    }
    size += playerInputs_.CalculateSize(_repeated_playerInputs_codec);
    if (Oid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerObject other) {
    if (other == null) {
      return;
    }
    if (other.PClass != 0) {
      PClass = other.PClass;
    }
    if (other.CurrentHp != 0) {
      CurrentHp = other.CurrentHp;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
    if (other.Strength != 0) {
      Strength = other.Strength;
    }
    if (other.Dexterity != 0) {
      Dexterity = other.Dexterity;
    }
    if (other.Intelligence != 0) {
      Intelligence = other.Intelligence;
    }
    if (other.LastProcessedSequenceID != 0) {
      LastProcessedSequenceID = other.LastProcessedSequenceID;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.AttackSpeed != 0F) {
      AttackSpeed = other.AttackSpeed;
    }
    if (other.MovementSpeed != 0F) {
      MovementSpeed = other.MovementSpeed;
    }
    playerInputs_.Add(other.playerInputs_);
    if (other.Oid != 0) {
      Oid = other.Oid;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          pClass_ = (global::PlayerClass) input.ReadEnum();
          break;
        }
        case 16: {
          CurrentHp = input.ReadInt32();
          break;
        }
        case 24: {
          MaxHp = input.ReadInt32();
          break;
        }
        case 32: {
          Strength = input.ReadInt32();
          break;
        }
        case 40: {
          Dexterity = input.ReadInt32();
          break;
        }
        case 48: {
          Intelligence = input.ReadInt32();
          break;
        }
        case 56: {
          LastProcessedSequenceID = input.ReadInt32();
          break;
        }
        case 69: {
          PosX = input.ReadFloat();
          break;
        }
        case 77: {
          PosY = input.ReadFloat();
          break;
        }
        case 85: {
          PosZ = input.ReadFloat();
          break;
        }
        case 93: {
          AttackSpeed = input.ReadFloat();
          break;
        }
        case 101: {
          MovementSpeed = input.ReadFloat();
          break;
        }
        case 106: {
          playerInputs_.AddEntriesFrom(input, _repeated_playerInputs_codec);
          break;
        }
        case 112: {
          Oid = input.ReadInt32();
          break;
        }
        case 122: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class SPlayerInput : pb::IMessage<SPlayerInput> {
  private static readonly pb::MessageParser<SPlayerInput> _parser = new pb::MessageParser<SPlayerInput>(() => new SPlayerInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SPlayerInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPlayerInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPlayerInput(SPlayerInput other) : this() {
    playerEvent_ = other.playerEvent_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    timestamp_ = other.timestamp_;
    sequenceID_ = other.sequenceID_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SPlayerInput Clone() {
    return new SPlayerInput(this);
  }

  /// <summary>Field number for the "playerEvent" field.</summary>
  public const int PlayerEventFieldNumber = 1;
  private global::MSPlayerEvent playerEvent_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSPlayerEvent PlayerEvent {
    get { return playerEvent_; }
    set {
      playerEvent_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 2;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 3;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 4;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 5;
  private float timestamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "sequenceID" field.</summary>
  public const int SequenceIDFieldNumber = 6;
  private int sequenceID_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SequenceID {
    get { return sequenceID_; }
    set {
      sequenceID_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SPlayerInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SPlayerInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerEvent != other.PlayerEvent) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Timestamp, other.Timestamp)) return false;
    if (SequenceID != other.SequenceID) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PlayerEvent != 0) hash ^= PlayerEvent.GetHashCode();
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (Timestamp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Timestamp);
    if (SequenceID != 0) hash ^= SequenceID.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PlayerEvent != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) PlayerEvent);
    }
    if (PosX != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(PosZ);
    }
    if (Timestamp != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Timestamp);
    }
    if (SequenceID != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(SequenceID);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PlayerEvent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlayerEvent);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (Timestamp != 0F) {
      size += 1 + 4;
    }
    if (SequenceID != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SequenceID);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SPlayerInput other) {
    if (other == null) {
      return;
    }
    if (other.PlayerEvent != 0) {
      PlayerEvent = other.PlayerEvent;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.Timestamp != 0F) {
      Timestamp = other.Timestamp;
    }
    if (other.SequenceID != 0) {
      SequenceID = other.SequenceID;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          playerEvent_ = (global::MSPlayerEvent) input.ReadEnum();
          break;
        }
        case 21: {
          PosX = input.ReadFloat();
          break;
        }
        case 29: {
          PosY = input.ReadFloat();
          break;
        }
        case 37: {
          PosZ = input.ReadFloat();
          break;
        }
        case 45: {
          Timestamp = input.ReadFloat();
          break;
        }
        case 48: {
          SequenceID = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
