// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ShiftServer_Messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ShiftServer_Messages.proto</summary>
public static partial class ShiftServerMessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for ShiftServer_Messages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ShiftServerMessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpTaGlmdFNlcnZlcl9NZXNzYWdlcy5wcm90byKuAwoPU2hpZnRTZXJ2ZXJE",
          "YXRhEiAKCGJhc2V2dGlkGAEgASgOMg4uTVNCYXNlRXZlbnRJZBIfCgdzdmV2",
          "dGlkGAIgASgOMg4uTVNTZXJ2ZXJFdmVudBIfCgdwbGV2dGlkGAMgASgOMg4u",
          "TVNQbGF5ZXJFdmVudBIdCgdTZXNzaW9uGAQgASgLMgwuU2Vzc2lvbkRhdGES",
          "HwoKQ2xpZW50SW5mbxgFIAEoCzILLkNsaWVudERhdGESJwoLQWNjb3VudERh",
          "dGEYBiABKAsyEi5Db21tb25BY2NvdW50RGF0YRIbCghSb29tRGF0YRgHIAEo",
          "CzIJLlJvb21EYXRhEh0KB0FjY291bnQYCCABKAsyDC5BY2NvdW50RGF0YRIg",
          "CgpXb3JsZFN0YXRlGAkgAygLMgwuc0dhbWVPYmplY3QSIgoLSW50ZXJhY3Rp",
          "b24YCiABKAsyDS5PYmplY3RBY3Rpb24SJAoNc1BsYXllck9iamVjdBgLIAEo",
          "CzINLlBsYXllck9iamVjdBImCgtFcnJvclJlYXNvbhgMIAEoDjIRLlNoaWZ0",
          "U2VydmVyRXJyb3IiGgoLU2Vzc2lvbkRhdGESCwoDc2lkGAIgASgJIlgKEUNv",
          "bW1vbkFjY291bnREYXRhEhAKCHVzZXJuYW1lGAEgASgJEhQKDHZpcnR1YWxN",
          "b25leRgCIAEoBRIbChN2aXJ0dWFsU3BlY2lhbE1vbmV5GAMgASgFIqwBCghS",
          "b29tRGF0YRIgCgtDcmVhdGVkUm9vbRgBIAEoCzILLlNlcnZlclJvb20SHwoK",
          "Sm9pbmVkUm9vbRgCIAEoCzILLlNlcnZlclJvb20SIAoLRGVsZXRlZFJvb20Y",
          "AyABKAsyCy5TZXJ2ZXJSb29tEh8KCkxlYXZlZFJvb20YBCABKAsyCy5TZXJ2",
          "ZXJSb29tEhoKBXJvb21zGAUgAygLMgsuU2VydmVyUm9vbSKTAQoKU2VydmVy",
          "Um9vbRIKCgJJZBgBIAEoCRITCgtjcmVhdGVkVGltZRgCIAEoCRITCgt1cGRh",
          "dGVkVGltZRgDIAEoCRIRCglpc1ByaXZhdGUYBCABKAgSDAoEbmFtZRgFIAEo",
          "CRIUCgxtYXhVc2VyQ291bnQYBiABKAUSGAoQY3VycmVudFVzZXJDb3VudBgH",
          "IAEoBSIxCgtBY2NvdW50RGF0YRIQCgh1c2VybmFtZRgBIAEoCRIQCghwYXNz",
          "d29yZBgCIAEoCSJcCgxPYmplY3RBY3Rpb24SIwoNY3VycmVudE9iamVjdBgB",
          "IAEoCzIMLnNHYW1lT2JqZWN0EicKEWludGVyYWN0ZWRPYmplY3RzGAIgAygL",
          "Mgwuc0dhbWVPYmplY3QiQwoKQ2xpZW50RGF0YRILCgN2ZXIYASABKAkSFAoM",
          "bWFjaGluZV9uYW1lGAIgASgJEhIKCm1hY2hpbmVfaWQYAyABKAkiRwoLc0dh",
          "bWVPYmplY3QSCwoDb2lkGAEgASgFEg0KBXBvc194GAIgASgCEg0KBXBvc195",
          "GAMgASgCEg0KBXBvc196GAQgASgCIpEBCgxQbGF5ZXJPYmplY3QSHQoHcE9i",
          "amVjdBgBIAEoCzIMLnNHYW1lT2JqZWN0EhwKBnBDbGFzcxgCIAEoDjIMLlBs",
          "YXllckNsYXNzEhEKCWN1cnJlbnRIcBgDIAEoBRINCgVtYXhIcBgEIAEoBRIi",
          "CgxwbGF5ZXJJbnB1dHMYBSADKAsyDC5QbGF5ZXJJbnB1dCI6CgtQbGF5ZXJJ",
          "bnB1dBINCgVwb3NfeBgBIAEoAhINCgVwb3NfeRgCIAEoAhINCgVwb3NfehgD",
          "IAEoAioxCg1NU0Jhc2VFdmVudElkEg8KC1BsYXllckV2ZW50EAASDwoLU2Vy",
          "dmVyRXZlbnQQASpdCg1NU1BsYXllckV2ZW50EhAKDFdPUkxEX1VQREFURRAA",
          "EggKBE1PVkUQARIKCgZBVFRBQ0sQAhIICgRERUFEEAMSBwoDVVNFEAQSEQoN",
          "Q1JFQVRFX1BMQVlFUhAFKucCCg1NU1NlcnZlckV2ZW50EgkKBUxPR0lOEAAS",
          "EAoMTE9HSU5fRkFJTEVEEAESEgoOUFVCTElDX01FU1NBR0UQAhINCglST09N",
          "X0pPSU4QAxIOCgpST09NX0xFQVZFEAQSFQoRUk9PTV9MRUFWRV9GQUlMRUQQ",
          "BRIPCgtST09NX0NSRUFURRAGEg8KC1JPT01fREVMRVRFEAcSEQoNUk9PTV9H",
          "RVRfSU5GTxAIEhQKEFJPT01fSk9JTl9GQUlMRUQQCRIWChJST09NX0NSRUFU",
          "RV9GQUlMRUQQChIWChJST09NX0RFTEVURV9GQUlMRUQQCxITCg9ST09NX0dB",
          "TUVfU1RBUlQQDBIRCg1MT0JCWV9SRUZSRVNIEA0SDgoKQ09OTkVDVElPThAO",
          "EhUKEUNPTk5FQ1RJT05fRkFJTEVEEA8SEwoPQ09OTkVDVElPTl9MT1NUEBAS",
          "EAoMUElOR19SRVFVRVNUEBEqwgEKEFNoaWZ0U2VydmVyRXJyb3ISEgoOQ0xJ",
          "RU5UX1ZFUl9PTEQQABIPCgtCQURfU0VTU0lPThABEhIKDlJPT01fTk9UX0ZP",
          "VU5EEAISEwoPQUxSRUFEWV9JTl9ST09NEAMSGwoXV1JPTkdfTE9HSU5fQ1JF",
          "REVOVElBTFMQBBIVChFXUk9OR19DTElFTlRfREFUQRAFEhUKEU5PX1JFU1BP",
          "TkRfU0VSVkVSEAYSFQoRUk9PTV9BVVRIX1BST0JMRU0QByo1Cg1TaGlmdFJv",
          "b21UeXBlEgkKBUxPQkJZEAASBwoDTU1PEAESEAoMQUNUSU9OQkFUVExFEAIq",
          "PAoLUGxheWVyQ2xhc3MSCwoHV2FycmlvchAAEgoKBkFyY2hlchABEggKBE1h",
          "Z2UQAhIKCgZQcmllc3QQA2IGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MSBaseEventId), typeof(global::MSPlayerEvent), typeof(global::MSServerEvent), typeof(global::ShiftServerError), typeof(global::ShiftRoomType), typeof(global::PlayerClass), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ShiftServerData), global::ShiftServerData.Parser, new[]{ "Basevtid", "Svevtid", "Plevtid", "Session", "ClientInfo", "AccountData", "RoomData", "Account", "WorldState", "Interaction", "SPlayerObject", "ErrorReason" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionData), global::SessionData.Parser, new[]{ "Sid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CommonAccountData), global::CommonAccountData.Parser, new[]{ "Username", "VirtualMoney", "VirtualSpecialMoney" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RoomData), global::RoomData.Parser, new[]{ "CreatedRoom", "JoinedRoom", "DeletedRoom", "LeavedRoom", "Rooms" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ServerRoom), global::ServerRoom.Parser, new[]{ "Id", "CreatedTime", "UpdatedTime", "IsPrivate", "Name", "MaxUserCount", "CurrentUserCount" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AccountData), global::AccountData.Parser, new[]{ "Username", "Password" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectAction), global::ObjectAction.Parser, new[]{ "CurrentObject", "InteractedObjects" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientData), global::ClientData.Parser, new[]{ "Ver", "MachineName", "MachineId" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sGameObject), global::sGameObject.Parser, new[]{ "Oid", "PosX", "PosY", "PosZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerObject), global::PlayerObject.Parser, new[]{ "PObject", "PClass", "CurrentHp", "MaxHp", "PlayerInputs" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInput), global::PlayerInput.Parser, new[]{ "PosX", "PosY", "PosZ" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
//// Control message ID.
/// </summary>
public enum MSBaseEventId {
  [pbr::OriginalName("PlayerEvent")] PlayerEvent = 0,
  [pbr::OriginalName("ServerEvent")] ServerEvent = 1,
}

/// <summary>
//// Control message ID.
/// </summary>
public enum MSPlayerEvent {
  /// <summary>
  ///Interaction events
  /// </summary>
  [pbr::OriginalName("WORLD_UPDATE")] WorldUpdate = 0,
  [pbr::OriginalName("MOVE")] Move = 1,
  [pbr::OriginalName("ATTACK")] Attack = 2,
  [pbr::OriginalName("DEAD")] Dead = 3,
  [pbr::OriginalName("USE")] Use = 4,
  [pbr::OriginalName("CREATE_PLAYER")] CreatePlayer = 5,
}

public enum MSServerEvent {
  [pbr::OriginalName("LOGIN")] Login = 0,
  [pbr::OriginalName("LOGIN_FAILED")] LoginFailed = 1,
  [pbr::OriginalName("PUBLIC_MESSAGE")] PublicMessage = 2,
  [pbr::OriginalName("ROOM_JOIN")] RoomJoin = 3,
  [pbr::OriginalName("ROOM_LEAVE")] RoomLeave = 4,
  [pbr::OriginalName("ROOM_LEAVE_FAILED")] RoomLeaveFailed = 5,
  [pbr::OriginalName("ROOM_CREATE")] RoomCreate = 6,
  [pbr::OriginalName("ROOM_DELETE")] RoomDelete = 7,
  [pbr::OriginalName("ROOM_GET_INFO")] RoomGetInfo = 8,
  [pbr::OriginalName("ROOM_JOIN_FAILED")] RoomJoinFailed = 9,
  [pbr::OriginalName("ROOM_CREATE_FAILED")] RoomCreateFailed = 10,
  [pbr::OriginalName("ROOM_DELETE_FAILED")] RoomDeleteFailed = 11,
  [pbr::OriginalName("ROOM_GAME_START")] RoomGameStart = 12,
  [pbr::OriginalName("LOBBY_REFRESH")] LobbyRefresh = 13,
  [pbr::OriginalName("CONNECTION")] Connection = 14,
  [pbr::OriginalName("CONNECTION_FAILED")] ConnectionFailed = 15,
  [pbr::OriginalName("CONNECTION_LOST")] ConnectionLost = 16,
  [pbr::OriginalName("PING_REQUEST")] PingRequest = 17,
}

public enum ShiftServerError {
  /// <summary>
  /// Application.version
  /// </summary>
  [pbr::OriginalName("CLIENT_VER_OLD")] ClientVerOld = 0,
  /// <summary>
  /// Session
  /// </summary>
  [pbr::OriginalName("BAD_SESSION")] BadSession = 1,
  [pbr::OriginalName("ROOM_NOT_FOUND")] RoomNotFound = 2,
  [pbr::OriginalName("ALREADY_IN_ROOM")] AlreadyInRoom = 3,
  /// <summary>
  /// Wrong login credentials
  /// </summary>
  [pbr::OriginalName("WRONG_LOGIN_CREDENTIALS")] WrongLoginCredentials = 4,
  /// <summary>
  /// Wrong client credentials
  /// </summary>
  [pbr::OriginalName("WRONG_CLIENT_DATA")] WrongClientData = 5,
  /// <summary>
  /// Connection lost
  /// </summary>
  [pbr::OriginalName("NO_RESPOND_SERVER")] NoRespondServer = 6,
  /// <summary>
  /// Occurs
  /// </summary>
  [pbr::OriginalName("ROOM_AUTH_PROBLEM")] RoomAuthProblem = 7,
}

public enum ShiftRoomType {
  [pbr::OriginalName("LOBBY")] Lobby = 0,
  [pbr::OriginalName("MMO")] Mmo = 1,
  [pbr::OriginalName("ACTIONBATTLE")] Actionbattle = 2,
}

public enum PlayerClass {
  [pbr::OriginalName("Warrior")] Warrior = 0,
  [pbr::OriginalName("Archer")] Archer = 1,
  [pbr::OriginalName("Mage")] Mage = 2,
  [pbr::OriginalName("Priest")] Priest = 3,
}

#endregion

#region Messages
public sealed partial class ShiftServerData : pb::IMessage<ShiftServerData> {
  private static readonly pb::MessageParser<ShiftServerData> _parser = new pb::MessageParser<ShiftServerData>(() => new ShiftServerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShiftServerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData(ShiftServerData other) : this() {
    basevtid_ = other.basevtid_;
    svevtid_ = other.svevtid_;
    plevtid_ = other.plevtid_;
    session_ = other.session_ != null ? other.session_.Clone() : null;
    clientInfo_ = other.clientInfo_ != null ? other.clientInfo_.Clone() : null;
    accountData_ = other.accountData_ != null ? other.accountData_.Clone() : null;
    roomData_ = other.roomData_ != null ? other.roomData_.Clone() : null;
    account_ = other.account_ != null ? other.account_.Clone() : null;
    worldState_ = other.worldState_.Clone();
    interaction_ = other.interaction_ != null ? other.interaction_.Clone() : null;
    sPlayerObject_ = other.sPlayerObject_ != null ? other.sPlayerObject_.Clone() : null;
    errorReason_ = other.errorReason_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData Clone() {
    return new ShiftServerData(this);
  }

  /// <summary>Field number for the "basevtid" field.</summary>
  public const int BasevtidFieldNumber = 1;
  private global::MSBaseEventId basevtid_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSBaseEventId Basevtid {
    get { return basevtid_; }
    set {
      basevtid_ = value;
    }
  }

  /// <summary>Field number for the "svevtid" field.</summary>
  public const int SvevtidFieldNumber = 2;
  private global::MSServerEvent svevtid_ = 0;
  /// <summary>
  /// Event type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSServerEvent Svevtid {
    get { return svevtid_; }
    set {
      svevtid_ = value;
    }
  }

  /// <summary>Field number for the "plevtid" field.</summary>
  public const int PlevtidFieldNumber = 3;
  private global::MSPlayerEvent plevtid_ = 0;
  /// <summary>
  /// Sub ev type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSPlayerEvent Plevtid {
    get { return plevtid_; }
    set {
      plevtid_ = value;
    }
  }

  /// <summary>Field number for the "Session" field.</summary>
  public const int SessionFieldNumber = 4;
  private global::SessionData session_;
  /// <summary>
  /// SessionData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SessionData Session {
    get { return session_; }
    set {
      session_ = value;
    }
  }

  /// <summary>Field number for the "ClientInfo" field.</summary>
  public const int ClientInfoFieldNumber = 5;
  private global::ClientData clientInfo_;
  /// <summary>
  /// ClientData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientData ClientInfo {
    get { return clientInfo_; }
    set {
      clientInfo_ = value;
    }
  }

  /// <summary>Field number for the "AccountData" field.</summary>
  public const int AccountDataFieldNumber = 6;
  private global::CommonAccountData accountData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CommonAccountData AccountData {
    get { return accountData_; }
    set {
      accountData_ = value;
    }
  }

  /// <summary>Field number for the "RoomData" field.</summary>
  public const int RoomDataFieldNumber = 7;
  private global::RoomData roomData_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RoomData RoomData {
    get { return roomData_; }
    set {
      roomData_ = value;
    }
  }

  /// <summary>Field number for the "Account" field.</summary>
  public const int AccountFieldNumber = 8;
  private global::AccountData account_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AccountData Account {
    get { return account_; }
    set {
      account_ = value;
    }
  }

  /// <summary>Field number for the "WorldState" field.</summary>
  public const int WorldStateFieldNumber = 9;
  private static readonly pb::FieldCodec<global::sGameObject> _repeated_worldState_codec
      = pb::FieldCodec.ForMessage(74, global::sGameObject.Parser);
  private readonly pbc::RepeatedField<global::sGameObject> worldState_ = new pbc::RepeatedField<global::sGameObject>();
  /// <summary>
  /// GameObjects list
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::sGameObject> WorldState {
    get { return worldState_; }
  }

  /// <summary>Field number for the "Interaction" field.</summary>
  public const int InteractionFieldNumber = 10;
  private global::ObjectAction interaction_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectAction Interaction {
    get { return interaction_; }
    set {
      interaction_ = value;
    }
  }

  /// <summary>Field number for the "sPlayerObject" field.</summary>
  public const int SPlayerObjectFieldNumber = 11;
  private global::PlayerObject sPlayerObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerObject SPlayerObject {
    get { return sPlayerObject_; }
    set {
      sPlayerObject_ = value;
    }
  }

  /// <summary>Field number for the "ErrorReason" field.</summary>
  public const int ErrorReasonFieldNumber = 12;
  private global::ShiftServerError errorReason_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShiftServerError ErrorReason {
    get { return errorReason_; }
    set {
      errorReason_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShiftServerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShiftServerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Basevtid != other.Basevtid) return false;
    if (Svevtid != other.Svevtid) return false;
    if (Plevtid != other.Plevtid) return false;
    if (!object.Equals(Session, other.Session)) return false;
    if (!object.Equals(ClientInfo, other.ClientInfo)) return false;
    if (!object.Equals(AccountData, other.AccountData)) return false;
    if (!object.Equals(RoomData, other.RoomData)) return false;
    if (!object.Equals(Account, other.Account)) return false;
    if(!worldState_.Equals(other.worldState_)) return false;
    if (!object.Equals(Interaction, other.Interaction)) return false;
    if (!object.Equals(SPlayerObject, other.SPlayerObject)) return false;
    if (ErrorReason != other.ErrorReason) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Basevtid != 0) hash ^= Basevtid.GetHashCode();
    if (Svevtid != 0) hash ^= Svevtid.GetHashCode();
    if (Plevtid != 0) hash ^= Plevtid.GetHashCode();
    if (session_ != null) hash ^= Session.GetHashCode();
    if (clientInfo_ != null) hash ^= ClientInfo.GetHashCode();
    if (accountData_ != null) hash ^= AccountData.GetHashCode();
    if (roomData_ != null) hash ^= RoomData.GetHashCode();
    if (account_ != null) hash ^= Account.GetHashCode();
    hash ^= worldState_.GetHashCode();
    if (interaction_ != null) hash ^= Interaction.GetHashCode();
    if (sPlayerObject_ != null) hash ^= SPlayerObject.GetHashCode();
    if (ErrorReason != 0) hash ^= ErrorReason.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Basevtid != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Basevtid);
    }
    if (Svevtid != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Svevtid);
    }
    if (Plevtid != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Plevtid);
    }
    if (session_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Session);
    }
    if (clientInfo_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ClientInfo);
    }
    if (accountData_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(AccountData);
    }
    if (roomData_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(RoomData);
    }
    if (account_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Account);
    }
    worldState_.WriteTo(output, _repeated_worldState_codec);
    if (interaction_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Interaction);
    }
    if (sPlayerObject_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(SPlayerObject);
    }
    if (ErrorReason != 0) {
      output.WriteRawTag(96);
      output.WriteEnum((int) ErrorReason);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Basevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Basevtid);
    }
    if (Svevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Svevtid);
    }
    if (Plevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Plevtid);
    }
    if (session_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
    }
    if (clientInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClientInfo);
    }
    if (accountData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AccountData);
    }
    if (roomData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomData);
    }
    if (account_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Account);
    }
    size += worldState_.CalculateSize(_repeated_worldState_codec);
    if (interaction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interaction);
    }
    if (sPlayerObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SPlayerObject);
    }
    if (ErrorReason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ErrorReason);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShiftServerData other) {
    if (other == null) {
      return;
    }
    if (other.Basevtid != 0) {
      Basevtid = other.Basevtid;
    }
    if (other.Svevtid != 0) {
      Svevtid = other.Svevtid;
    }
    if (other.Plevtid != 0) {
      Plevtid = other.Plevtid;
    }
    if (other.session_ != null) {
      if (session_ == null) {
        session_ = new global::SessionData();
      }
      Session.MergeFrom(other.Session);
    }
    if (other.clientInfo_ != null) {
      if (clientInfo_ == null) {
        clientInfo_ = new global::ClientData();
      }
      ClientInfo.MergeFrom(other.ClientInfo);
    }
    if (other.accountData_ != null) {
      if (accountData_ == null) {
        accountData_ = new global::CommonAccountData();
      }
      AccountData.MergeFrom(other.AccountData);
    }
    if (other.roomData_ != null) {
      if (roomData_ == null) {
        roomData_ = new global::RoomData();
      }
      RoomData.MergeFrom(other.RoomData);
    }
    if (other.account_ != null) {
      if (account_ == null) {
        account_ = new global::AccountData();
      }
      Account.MergeFrom(other.Account);
    }
    worldState_.Add(other.worldState_);
    if (other.interaction_ != null) {
      if (interaction_ == null) {
        interaction_ = new global::ObjectAction();
      }
      Interaction.MergeFrom(other.Interaction);
    }
    if (other.sPlayerObject_ != null) {
      if (sPlayerObject_ == null) {
        sPlayerObject_ = new global::PlayerObject();
      }
      SPlayerObject.MergeFrom(other.SPlayerObject);
    }
    if (other.ErrorReason != 0) {
      ErrorReason = other.ErrorReason;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          basevtid_ = (global::MSBaseEventId) input.ReadEnum();
          break;
        }
        case 16: {
          svevtid_ = (global::MSServerEvent) input.ReadEnum();
          break;
        }
        case 24: {
          plevtid_ = (global::MSPlayerEvent) input.ReadEnum();
          break;
        }
        case 34: {
          if (session_ == null) {
            session_ = new global::SessionData();
          }
          input.ReadMessage(session_);
          break;
        }
        case 42: {
          if (clientInfo_ == null) {
            clientInfo_ = new global::ClientData();
          }
          input.ReadMessage(clientInfo_);
          break;
        }
        case 50: {
          if (accountData_ == null) {
            accountData_ = new global::CommonAccountData();
          }
          input.ReadMessage(accountData_);
          break;
        }
        case 58: {
          if (roomData_ == null) {
            roomData_ = new global::RoomData();
          }
          input.ReadMessage(roomData_);
          break;
        }
        case 66: {
          if (account_ == null) {
            account_ = new global::AccountData();
          }
          input.ReadMessage(account_);
          break;
        }
        case 74: {
          worldState_.AddEntriesFrom(input, _repeated_worldState_codec);
          break;
        }
        case 82: {
          if (interaction_ == null) {
            interaction_ = new global::ObjectAction();
          }
          input.ReadMessage(interaction_);
          break;
        }
        case 90: {
          if (sPlayerObject_ == null) {
            sPlayerObject_ = new global::PlayerObject();
          }
          input.ReadMessage(sPlayerObject_);
          break;
        }
        case 96: {
          errorReason_ = (global::ShiftServerError) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class SessionData : pb::IMessage<SessionData> {
  private static readonly pb::MessageParser<SessionData> _parser = new pb::MessageParser<SessionData>(() => new SessionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData(SessionData other) : this() {
    sid_ = other.sid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData Clone() {
    return new SessionData(this);
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 2;
  private string sid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sid {
    get { return sid_; }
    set {
      sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sid != other.Sid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sid.Length != 0) hash ^= Sid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Sid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Sid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionData other) {
    if (other == null) {
      return;
    }
    if (other.Sid.Length != 0) {
      Sid = other.Sid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          Sid = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class CommonAccountData : pb::IMessage<CommonAccountData> {
  private static readonly pb::MessageParser<CommonAccountData> _parser = new pb::MessageParser<CommonAccountData>(() => new CommonAccountData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CommonAccountData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData(CommonAccountData other) : this() {
    username_ = other.username_;
    virtualMoney_ = other.virtualMoney_;
    virtualSpecialMoney_ = other.virtualSpecialMoney_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonAccountData Clone() {
    return new CommonAccountData(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "virtualMoney" field.</summary>
  public const int VirtualMoneyFieldNumber = 2;
  private int virtualMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VirtualMoney {
    get { return virtualMoney_; }
    set {
      virtualMoney_ = value;
    }
  }

  /// <summary>Field number for the "virtualSpecialMoney" field.</summary>
  public const int VirtualSpecialMoneyFieldNumber = 3;
  private int virtualSpecialMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int VirtualSpecialMoney {
    get { return virtualSpecialMoney_; }
    set {
      virtualSpecialMoney_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CommonAccountData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CommonAccountData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (VirtualMoney != other.VirtualMoney) return false;
    if (VirtualSpecialMoney != other.VirtualSpecialMoney) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (VirtualMoney != 0) hash ^= VirtualMoney.GetHashCode();
    if (VirtualSpecialMoney != 0) hash ^= VirtualSpecialMoney.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (VirtualMoney != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(VirtualMoney);
    }
    if (VirtualSpecialMoney != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(VirtualSpecialMoney);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (VirtualMoney != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualMoney);
    }
    if (VirtualSpecialMoney != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VirtualSpecialMoney);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CommonAccountData other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.VirtualMoney != 0) {
      VirtualMoney = other.VirtualMoney;
    }
    if (other.VirtualSpecialMoney != 0) {
      VirtualSpecialMoney = other.VirtualSpecialMoney;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 16: {
          VirtualMoney = input.ReadInt32();
          break;
        }
        case 24: {
          VirtualSpecialMoney = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RoomData : pb::IMessage<RoomData> {
  private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData(RoomData other) : this() {
    createdRoom_ = other.createdRoom_ != null ? other.createdRoom_.Clone() : null;
    joinedRoom_ = other.joinedRoom_ != null ? other.joinedRoom_.Clone() : null;
    deletedRoom_ = other.deletedRoom_ != null ? other.deletedRoom_.Clone() : null;
    leavedRoom_ = other.leavedRoom_ != null ? other.leavedRoom_.Clone() : null;
    rooms_ = other.rooms_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RoomData Clone() {
    return new RoomData(this);
  }

  /// <summary>Field number for the "CreatedRoom" field.</summary>
  public const int CreatedRoomFieldNumber = 1;
  private global::ServerRoom createdRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerRoom CreatedRoom {
    get { return createdRoom_; }
    set {
      createdRoom_ = value;
    }
  }

  /// <summary>Field number for the "JoinedRoom" field.</summary>
  public const int JoinedRoomFieldNumber = 2;
  private global::ServerRoom joinedRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerRoom JoinedRoom {
    get { return joinedRoom_; }
    set {
      joinedRoom_ = value;
    }
  }

  /// <summary>Field number for the "DeletedRoom" field.</summary>
  public const int DeletedRoomFieldNumber = 3;
  private global::ServerRoom deletedRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerRoom DeletedRoom {
    get { return deletedRoom_; }
    set {
      deletedRoom_ = value;
    }
  }

  /// <summary>Field number for the "LeavedRoom" field.</summary>
  public const int LeavedRoomFieldNumber = 4;
  private global::ServerRoom leavedRoom_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ServerRoom LeavedRoom {
    get { return leavedRoom_; }
    set {
      leavedRoom_ = value;
    }
  }

  /// <summary>Field number for the "rooms" field.</summary>
  public const int RoomsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ServerRoom> _repeated_rooms_codec
      = pb::FieldCodec.ForMessage(42, global::ServerRoom.Parser);
  private readonly pbc::RepeatedField<global::ServerRoom> rooms_ = new pbc::RepeatedField<global::ServerRoom>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ServerRoom> Rooms {
    get { return rooms_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RoomData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RoomData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CreatedRoom, other.CreatedRoom)) return false;
    if (!object.Equals(JoinedRoom, other.JoinedRoom)) return false;
    if (!object.Equals(DeletedRoom, other.DeletedRoom)) return false;
    if (!object.Equals(LeavedRoom, other.LeavedRoom)) return false;
    if(!rooms_.Equals(other.rooms_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (createdRoom_ != null) hash ^= CreatedRoom.GetHashCode();
    if (joinedRoom_ != null) hash ^= JoinedRoom.GetHashCode();
    if (deletedRoom_ != null) hash ^= DeletedRoom.GetHashCode();
    if (leavedRoom_ != null) hash ^= LeavedRoom.GetHashCode();
    hash ^= rooms_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (createdRoom_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CreatedRoom);
    }
    if (joinedRoom_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(JoinedRoom);
    }
    if (deletedRoom_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(DeletedRoom);
    }
    if (leavedRoom_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LeavedRoom);
    }
    rooms_.WriteTo(output, _repeated_rooms_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (createdRoom_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreatedRoom);
    }
    if (joinedRoom_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(JoinedRoom);
    }
    if (deletedRoom_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeletedRoom);
    }
    if (leavedRoom_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LeavedRoom);
    }
    size += rooms_.CalculateSize(_repeated_rooms_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RoomData other) {
    if (other == null) {
      return;
    }
    if (other.createdRoom_ != null) {
      if (createdRoom_ == null) {
        createdRoom_ = new global::ServerRoom();
      }
      CreatedRoom.MergeFrom(other.CreatedRoom);
    }
    if (other.joinedRoom_ != null) {
      if (joinedRoom_ == null) {
        joinedRoom_ = new global::ServerRoom();
      }
      JoinedRoom.MergeFrom(other.JoinedRoom);
    }
    if (other.deletedRoom_ != null) {
      if (deletedRoom_ == null) {
        deletedRoom_ = new global::ServerRoom();
      }
      DeletedRoom.MergeFrom(other.DeletedRoom);
    }
    if (other.leavedRoom_ != null) {
      if (leavedRoom_ == null) {
        leavedRoom_ = new global::ServerRoom();
      }
      LeavedRoom.MergeFrom(other.LeavedRoom);
    }
    rooms_.Add(other.rooms_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (createdRoom_ == null) {
            createdRoom_ = new global::ServerRoom();
          }
          input.ReadMessage(createdRoom_);
          break;
        }
        case 18: {
          if (joinedRoom_ == null) {
            joinedRoom_ = new global::ServerRoom();
          }
          input.ReadMessage(joinedRoom_);
          break;
        }
        case 26: {
          if (deletedRoom_ == null) {
            deletedRoom_ = new global::ServerRoom();
          }
          input.ReadMessage(deletedRoom_);
          break;
        }
        case 34: {
          if (leavedRoom_ == null) {
            leavedRoom_ = new global::ServerRoom();
          }
          input.ReadMessage(leavedRoom_);
          break;
        }
        case 42: {
          rooms_.AddEntriesFrom(input, _repeated_rooms_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ServerRoom : pb::IMessage<ServerRoom> {
  private static readonly pb::MessageParser<ServerRoom> _parser = new pb::MessageParser<ServerRoom>(() => new ServerRoom());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ServerRoom> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerRoom() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerRoom(ServerRoom other) : this() {
    id_ = other.id_;
    createdTime_ = other.createdTime_;
    updatedTime_ = other.updatedTime_;
    isPrivate_ = other.isPrivate_;
    name_ = other.name_;
    maxUserCount_ = other.maxUserCount_;
    currentUserCount_ = other.currentUserCount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ServerRoom Clone() {
    return new ServerRoom(this);
  }

  /// <summary>Field number for the "Id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "createdTime" field.</summary>
  public const int CreatedTimeFieldNumber = 2;
  private string createdTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CreatedTime {
    get { return createdTime_; }
    set {
      createdTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "updatedTime" field.</summary>
  public const int UpdatedTimeFieldNumber = 3;
  private string updatedTime_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UpdatedTime {
    get { return updatedTime_; }
    set {
      updatedTime_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isPrivate" field.</summary>
  public const int IsPrivateFieldNumber = 4;
  private bool isPrivate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPrivate {
    get { return isPrivate_; }
    set {
      isPrivate_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 5;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "maxUserCount" field.</summary>
  public const int MaxUserCountFieldNumber = 6;
  private int maxUserCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxUserCount {
    get { return maxUserCount_; }
    set {
      maxUserCount_ = value;
    }
  }

  /// <summary>Field number for the "currentUserCount" field.</summary>
  public const int CurrentUserCountFieldNumber = 7;
  private int currentUserCount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentUserCount {
    get { return currentUserCount_; }
    set {
      currentUserCount_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ServerRoom);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ServerRoom other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (CreatedTime != other.CreatedTime) return false;
    if (UpdatedTime != other.UpdatedTime) return false;
    if (IsPrivate != other.IsPrivate) return false;
    if (Name != other.Name) return false;
    if (MaxUserCount != other.MaxUserCount) return false;
    if (CurrentUserCount != other.CurrentUserCount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (CreatedTime.Length != 0) hash ^= CreatedTime.GetHashCode();
    if (UpdatedTime.Length != 0) hash ^= UpdatedTime.GetHashCode();
    if (IsPrivate != false) hash ^= IsPrivate.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (MaxUserCount != 0) hash ^= MaxUserCount.GetHashCode();
    if (CurrentUserCount != 0) hash ^= CurrentUserCount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (CreatedTime.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(CreatedTime);
    }
    if (UpdatedTime.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(UpdatedTime);
    }
    if (IsPrivate != false) {
      output.WriteRawTag(32);
      output.WriteBool(IsPrivate);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Name);
    }
    if (MaxUserCount != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(MaxUserCount);
    }
    if (CurrentUserCount != 0) {
      output.WriteRawTag(56);
      output.WriteInt32(CurrentUserCount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (CreatedTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CreatedTime);
    }
    if (UpdatedTime.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UpdatedTime);
    }
    if (IsPrivate != false) {
      size += 1 + 1;
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (MaxUserCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxUserCount);
    }
    if (CurrentUserCount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentUserCount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ServerRoom other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.CreatedTime.Length != 0) {
      CreatedTime = other.CreatedTime;
    }
    if (other.UpdatedTime.Length != 0) {
      UpdatedTime = other.UpdatedTime;
    }
    if (other.IsPrivate != false) {
      IsPrivate = other.IsPrivate;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.MaxUserCount != 0) {
      MaxUserCount = other.MaxUserCount;
    }
    if (other.CurrentUserCount != 0) {
      CurrentUserCount = other.CurrentUserCount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          CreatedTime = input.ReadString();
          break;
        }
        case 26: {
          UpdatedTime = input.ReadString();
          break;
        }
        case 32: {
          IsPrivate = input.ReadBool();
          break;
        }
        case 42: {
          Name = input.ReadString();
          break;
        }
        case 48: {
          MaxUserCount = input.ReadInt32();
          break;
        }
        case 56: {
          CurrentUserCount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class AccountData : pb::IMessage<AccountData> {
  private static readonly pb::MessageParser<AccountData> _parser = new pb::MessageParser<AccountData>(() => new AccountData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AccountData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData(AccountData other) : this() {
    username_ = other.username_;
    password_ = other.password_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AccountData Clone() {
    return new AccountData(this);
  }

  /// <summary>Field number for the "username" field.</summary>
  public const int UsernameFieldNumber = 1;
  private string username_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Username {
    get { return username_; }
    set {
      username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "password" field.</summary>
  public const int PasswordFieldNumber = 2;
  private string password_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Password {
    get { return password_; }
    set {
      password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AccountData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AccountData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Username != other.Username) return false;
    if (Password != other.Password) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Username.Length != 0) hash ^= Username.GetHashCode();
    if (Password.Length != 0) hash ^= Password.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Username.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Username);
    }
    if (Password.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Password);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Username.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
    }
    if (Password.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AccountData other) {
    if (other == null) {
      return;
    }
    if (other.Username.Length != 0) {
      Username = other.Username;
    }
    if (other.Password.Length != 0) {
      Password = other.Password;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Username = input.ReadString();
          break;
        }
        case 18: {
          Password = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectAction : pb::IMessage<ObjectAction> {
  private static readonly pb::MessageParser<ObjectAction> _parser = new pb::MessageParser<ObjectAction>(() => new ObjectAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction(ObjectAction other) : this() {
    currentObject_ = other.currentObject_ != null ? other.currentObject_.Clone() : null;
    interactedObjects_ = other.interactedObjects_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction Clone() {
    return new ObjectAction(this);
  }

  /// <summary>Field number for the "currentObject" field.</summary>
  public const int CurrentObjectFieldNumber = 1;
  private global::sGameObject currentObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::sGameObject CurrentObject {
    get { return currentObject_; }
    set {
      currentObject_ = value;
    }
  }

  /// <summary>Field number for the "interactedObjects" field.</summary>
  public const int InteractedObjectsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::sGameObject> _repeated_interactedObjects_codec
      = pb::FieldCodec.ForMessage(18, global::sGameObject.Parser);
  private readonly pbc::RepeatedField<global::sGameObject> interactedObjects_ = new pbc::RepeatedField<global::sGameObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::sGameObject> InteractedObjects {
    get { return interactedObjects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CurrentObject, other.CurrentObject)) return false;
    if(!interactedObjects_.Equals(other.interactedObjects_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (currentObject_ != null) hash ^= CurrentObject.GetHashCode();
    hash ^= interactedObjects_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (currentObject_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CurrentObject);
    }
    interactedObjects_.WriteTo(output, _repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (currentObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentObject);
    }
    size += interactedObjects_.CalculateSize(_repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectAction other) {
    if (other == null) {
      return;
    }
    if (other.currentObject_ != null) {
      if (currentObject_ == null) {
        currentObject_ = new global::sGameObject();
      }
      CurrentObject.MergeFrom(other.CurrentObject);
    }
    interactedObjects_.Add(other.interactedObjects_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (currentObject_ == null) {
            currentObject_ = new global::sGameObject();
          }
          input.ReadMessage(currentObject_);
          break;
        }
        case 18: {
          interactedObjects_.AddEntriesFrom(input, _repeated_interactedObjects_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClientData : pb::IMessage<ClientData> {
  private static readonly pb::MessageParser<ClientData> _parser = new pb::MessageParser<ClientData>(() => new ClientData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData(ClientData other) : this() {
    ver_ = other.ver_;
    machineName_ = other.machineName_;
    machineId_ = other.machineId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData Clone() {
    return new ClientData(this);
  }

  /// <summary>Field number for the "ver" field.</summary>
  public const int VerFieldNumber = 1;
  private string ver_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ver {
    get { return ver_; }
    set {
      ver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_name" field.</summary>
  public const int MachineNameFieldNumber = 2;
  private string machineName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineName {
    get { return machineName_; }
    set {
      machineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_id" field.</summary>
  public const int MachineIdFieldNumber = 3;
  private string machineId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineId {
    get { return machineId_; }
    set {
      machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ver != other.Ver) return false;
    if (MachineName != other.MachineName) return false;
    if (MachineId != other.MachineId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ver.Length != 0) hash ^= Ver.GetHashCode();
    if (MachineName.Length != 0) hash ^= MachineName.GetHashCode();
    if (MachineId.Length != 0) hash ^= MachineId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ver.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ver);
    }
    if (MachineName.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(MachineName);
    }
    if (MachineId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MachineId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ver.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ver);
    }
    if (MachineName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineName);
    }
    if (MachineId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientData other) {
    if (other == null) {
      return;
    }
    if (other.Ver.Length != 0) {
      Ver = other.Ver;
    }
    if (other.MachineName.Length != 0) {
      MachineName = other.MachineName;
    }
    if (other.MachineId.Length != 0) {
      MachineId = other.MachineId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ver = input.ReadString();
          break;
        }
        case 18: {
          MachineName = input.ReadString();
          break;
        }
        case 26: {
          MachineId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class sGameObject : pb::IMessage<sGameObject> {
  private static readonly pb::MessageParser<sGameObject> _parser = new pb::MessageParser<sGameObject>(() => new sGameObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sGameObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject(sGameObject other) : this() {
    oid_ = other.oid_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject Clone() {
    return new sGameObject(this);
  }

  /// <summary>Field number for the "oid" field.</summary>
  public const int OidFieldNumber = 1;
  private int oid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oid {
    get { return oid_; }
    set {
      oid_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 2;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 3;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 4;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sGameObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sGameObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Oid != other.Oid) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Oid != 0) hash ^= Oid.GetHashCode();
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Oid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Oid);
    }
    if (PosX != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(PosZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Oid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sGameObject other) {
    if (other == null) {
      return;
    }
    if (other.Oid != 0) {
      Oid = other.Oid;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Oid = input.ReadInt32();
          break;
        }
        case 21: {
          PosX = input.ReadFloat();
          break;
        }
        case 29: {
          PosY = input.ReadFloat();
          break;
        }
        case 37: {
          PosZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerObject : pb::IMessage<PlayerObject> {
  private static readonly pb::MessageParser<PlayerObject> _parser = new pb::MessageParser<PlayerObject>(() => new PlayerObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject(PlayerObject other) : this() {
    pObject_ = other.pObject_ != null ? other.pObject_.Clone() : null;
    pClass_ = other.pClass_;
    currentHp_ = other.currentHp_;
    maxHp_ = other.maxHp_;
    playerInputs_ = other.playerInputs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerObject Clone() {
    return new PlayerObject(this);
  }

  /// <summary>Field number for the "pObject" field.</summary>
  public const int PObjectFieldNumber = 1;
  private global::sGameObject pObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::sGameObject PObject {
    get { return pObject_; }
    set {
      pObject_ = value;
    }
  }

  /// <summary>Field number for the "pClass" field.</summary>
  public const int PClassFieldNumber = 2;
  private global::PlayerClass pClass_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PlayerClass PClass {
    get { return pClass_; }
    set {
      pClass_ = value;
    }
  }

  /// <summary>Field number for the "currentHp" field.</summary>
  public const int CurrentHpFieldNumber = 3;
  private int currentHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentHp {
    get { return currentHp_; }
    set {
      currentHp_ = value;
    }
  }

  /// <summary>Field number for the "maxHp" field.</summary>
  public const int MaxHpFieldNumber = 4;
  private int maxHp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxHp {
    get { return maxHp_; }
    set {
      maxHp_ = value;
    }
  }

  /// <summary>Field number for the "playerInputs" field.</summary>
  public const int PlayerInputsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::PlayerInput> _repeated_playerInputs_codec
      = pb::FieldCodec.ForMessage(42, global::PlayerInput.Parser);
  private readonly pbc::RepeatedField<global::PlayerInput> playerInputs_ = new pbc::RepeatedField<global::PlayerInput>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PlayerInput> PlayerInputs {
    get { return playerInputs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(PObject, other.PObject)) return false;
    if (PClass != other.PClass) return false;
    if (CurrentHp != other.CurrentHp) return false;
    if (MaxHp != other.MaxHp) return false;
    if(!playerInputs_.Equals(other.playerInputs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (pObject_ != null) hash ^= PObject.GetHashCode();
    if (PClass != 0) hash ^= PClass.GetHashCode();
    if (CurrentHp != 0) hash ^= CurrentHp.GetHashCode();
    if (MaxHp != 0) hash ^= MaxHp.GetHashCode();
    hash ^= playerInputs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (pObject_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(PObject);
    }
    if (PClass != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PClass);
    }
    if (CurrentHp != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(CurrentHp);
    }
    if (MaxHp != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MaxHp);
    }
    playerInputs_.WriteTo(output, _repeated_playerInputs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (pObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(PObject);
    }
    if (PClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PClass);
    }
    if (CurrentHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentHp);
    }
    if (MaxHp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHp);
    }
    size += playerInputs_.CalculateSize(_repeated_playerInputs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerObject other) {
    if (other == null) {
      return;
    }
    if (other.pObject_ != null) {
      if (pObject_ == null) {
        pObject_ = new global::sGameObject();
      }
      PObject.MergeFrom(other.PObject);
    }
    if (other.PClass != 0) {
      PClass = other.PClass;
    }
    if (other.CurrentHp != 0) {
      CurrentHp = other.CurrentHp;
    }
    if (other.MaxHp != 0) {
      MaxHp = other.MaxHp;
    }
    playerInputs_.Add(other.playerInputs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (pObject_ == null) {
            pObject_ = new global::sGameObject();
          }
          input.ReadMessage(pObject_);
          break;
        }
        case 16: {
          pClass_ = (global::PlayerClass) input.ReadEnum();
          break;
        }
        case 24: {
          CurrentHp = input.ReadInt32();
          break;
        }
        case 32: {
          MaxHp = input.ReadInt32();
          break;
        }
        case 42: {
          playerInputs_.AddEntriesFrom(input, _repeated_playerInputs_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInput : pb::IMessage<PlayerInput> {
  private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput(PlayerInput other) : this() {
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput Clone() {
    return new PlayerInput(this);
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 1;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 2;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 3;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PosX != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInput other) {
    if (other == null) {
      return;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 13: {
          PosX = input.ReadFloat();
          break;
        }
        case 21: {
          PosY = input.ReadFloat();
          break;
        }
        case 29: {
          PosZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
