// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ShiftServer_Messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from ShiftServer_Messages.proto</summary>
public static partial class ShiftServerMessagesReflection {

  #region Descriptor
  /// <summary>File descriptor for ShiftServer_Messages.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ShiftServerMessagesReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChpTaGlmdFNlcnZlcl9NZXNzYWdlcy5wcm90byL/AQoPU2hpZnRTZXJ2ZXJE",
          "YXRhEiAKCGJhc2V2dGlkGAEgASgOMg4uTVNCYXNlRXZlbnRJZBIfCgdzdmV2",
          "dGlkGAIgASgOMg4uTVNTZXJ2ZXJFdmVudBIfCgdwbGV2dGlkGAMgASgOMg4u",
          "TVNQbGF5ZXJFdmVudBIdCgdzZXNzaW9uGAQgASgLMgwuU2Vzc2lvbkRhdGES",
          "GwoGY2xEYXRhGAUgASgLMgsuQ2xpZW50RGF0YRIoChJ1cGRhdGVkR2FtZU9i",
          "amVjdHMYBiADKAsyDC5zR2FtZU9iamVjdBIiCgtpbnRlcmFjdGlvbhgHIAEo",
          "CzINLk9iamVjdEFjdGlvbiIaCgtTZXNzaW9uRGF0YRILCgNzaWQYAiABKAki",
          "XAoMT2JqZWN0QWN0aW9uEiMKDWN1cnJlbnRPYmplY3QYASABKAsyDC5zR2Ft",
          "ZU9iamVjdBInChFpbnRlcmFjdGVkT2JqZWN0cxgCIAMoCzIMLnNHYW1lT2Jq",
          "ZWN0ImQKCkNsaWVudERhdGESCwoDdmVyGAEgASgJEhEKCWxvZ2lubmFtZRgC",
          "IAEoCRIUCgxtYWNoaW5lX25hbWUYAyABKAkSEgoKbWFjaGluZV9pZBgEIAEo",
          "CRIMCgRndWlkGAUgASgJIqEBCgtzR2FtZU9iamVjdBILCgNvaWQYASABKAUS",
          "DQoFcG9zX3gYAiABKAISDQoFcG9zX3kYAyABKAISDQoFcG9zX3oYBCABKAIS",
          "DQoFcm90X3gYBSABKAISDQoFcm90X3kYBiABKAISDQoFcm90X3oYByABKAIS",
          "DQoFc2NsX3gYCCABKAISDQoFc2NsX3kYCSABKAISDQoFc2NsX3oYCiABKAIi",
          "GgoLUGxheWVySW5wdXQSCwoDb2lkGAEgASgFKjcKDU1TQmFzZUV2ZW50SWQS",
          "EgoOTVNfUGxheWVyRXZlbnQQABISCg5NU19TZXJ2ZXJFdmVudBABKkgKDU1T",
          "UGxheWVyRXZlbnQSDAoITVNfT01vdmUQABIOCgpNU19PQXR0YWNrEAESDAoI",
          "TVNfT0RlYWQQAhILCgdNU19PVXNlEAMquAIKDU1TU2VydmVyRXZlbnQSDgoK",
          "TVNfSW52YWxpZBAAEh8KG01TX0dhbWVzZXJ2ZXJTZXNzaW9uUmVxdWVzdBAF",
          "EiMKH01TX0dhbWVzZXJ2ZXJTZXNzaW9uRXN0YWJsaXNoZWQQBhIQCgxNU19O",
          "b1Nlc3Npb24QBxIRCg1NU19EaWFnbm9zdGljEAgSEgoOTVNfSm9pblJlcXVl",
          "c3QQCRIZChVNU19Kb2luUmVxdWVzdFN1Y2Nlc3MQChIYChRNU19Kb2luUmVx",
          "dWVzdEZhaWxlZBALEgwKCE1TX1N0YXRzEA0SFQoRTVNfQ29ubmVjdFJlcXVl",
          "c3QQEhIQCgxNU19Db25uZWN0T0sQExIXChNNU19Db25uZWN0aW9uQ2xvc2Vk",
          "EBQSEwoPTVNfTm9Db25uZWN0aW9uEBViBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::MSBaseEventId), typeof(global::MSPlayerEvent), typeof(global::MSServerEvent), }, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ShiftServerData), global::ShiftServerData.Parser, new[]{ "Basevtid", "Svevtid", "Plevtid", "Session", "ClData", "UpdatedGameObjects", "Interaction" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SessionData), global::SessionData.Parser, new[]{ "Sid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectAction), global::ObjectAction.Parser, new[]{ "CurrentObject", "InteractedObjects" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientData), global::ClientData.Parser, new[]{ "Ver", "Loginname", "MachineName", "MachineId", "Guid" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::sGameObject), global::sGameObject.Parser, new[]{ "Oid", "PosX", "PosY", "PosZ", "RotX", "RotY", "RotZ", "SclX", "SclY", "SclZ" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PlayerInput), global::PlayerInput.Parser, new[]{ "Oid" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
//// Control message ID.
/// </summary>
public enum MSBaseEventId {
  [pbr::OriginalName("MS_PlayerEvent")] MsPlayerEvent = 0,
  [pbr::OriginalName("MS_ServerEvent")] MsServerEvent = 1,
}

/// <summary>
//// Control message ID.
/// </summary>
public enum MSPlayerEvent {
  /// <summary>
  ///Interaction events
  /// </summary>
  [pbr::OriginalName("MS_OMove")] MsOmove = 0,
  [pbr::OriginalName("MS_OAttack")] MsOattack = 1,
  [pbr::OriginalName("MS_ODead")] MsOdead = 2,
  [pbr::OriginalName("MS_OUse")] MsOuse = 3,
}

public enum MSServerEvent {
  /// <summary>
  /// Reserved
  /// </summary>
  [pbr::OriginalName("MS_Invalid")] MsInvalid = 0,
  /// <summary>
  /// Client -> Router
  /// </summary>
  [pbr::OriginalName("MS_GameserverSessionRequest")] MsGameserverSessionRequest = 5,
  /// <summary>
  /// Router -> Client
  /// </summary>
  [pbr::OriginalName("MS_GameserverSessionEstablished")] MsGameserverSessionEstablished = 6,
  /// <summary>
  /// Router -> Server, Router -> Client
  /// </summary>
  [pbr::OriginalName("MS_NoSession")] MsNoSession = 7,
  /// <summary>
  /// Diagnostic / status message Router -> Client
  /// </summary>
  [pbr::OriginalName("MS_Diagnostic")] MsDiagnostic = 8,
  /// <summary>
  /// Join
  /// </summary>
  [pbr::OriginalName("MS_JoinRequest")] MsJoinRequest = 9,
  /// <summary>
  /// Join
  /// </summary>
  [pbr::OriginalName("MS_JoinRequestSuccess")] MsJoinRequestSuccess = 10,
  /// <summary>
  /// Join
  /// </summary>
  [pbr::OriginalName("MS_JoinRequestFailed")] MsJoinRequestFailed = 11,
  /// <summary>
  /// Any -> Any
  /// </summary>
  [pbr::OriginalName("MS_Stats")] MsStats = 13,
  /// <summary>
  /// Client->router->server
  /// </summary>
  [pbr::OriginalName("MS_ConnectRequest")] MsConnectRequest = 18,
  /// <summary>
  /// Server->router->client.
  /// </summary>
  [pbr::OriginalName("MS_ConnectOK")] MsConnectOk = 19,
  /// <summary>
  /// Server&lt;->router&lt;->client.  A reply is requested to this packet
  /// </summary>
  [pbr::OriginalName("MS_ConnectionClosed")] MsConnectionClosed = 20,
  /// <summary>
  /// Server&lt;->router&lt;->client.  A reply should never be sent to this packet
  /// </summary>
  [pbr::OriginalName("MS_NoConnection")] MsNoConnection = 21,
}

#endregion

#region Messages
public sealed partial class ShiftServerData : pb::IMessage<ShiftServerData> {
  private static readonly pb::MessageParser<ShiftServerData> _parser = new pb::MessageParser<ShiftServerData>(() => new ShiftServerData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShiftServerData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData(ShiftServerData other) : this() {
    basevtid_ = other.basevtid_;
    svevtid_ = other.svevtid_;
    plevtid_ = other.plevtid_;
    session_ = other.session_ != null ? other.session_.Clone() : null;
    clData_ = other.clData_ != null ? other.clData_.Clone() : null;
    updatedGameObjects_ = other.updatedGameObjects_.Clone();
    interaction_ = other.interaction_ != null ? other.interaction_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShiftServerData Clone() {
    return new ShiftServerData(this);
  }

  /// <summary>Field number for the "basevtid" field.</summary>
  public const int BasevtidFieldNumber = 1;
  private global::MSBaseEventId basevtid_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSBaseEventId Basevtid {
    get { return basevtid_; }
    set {
      basevtid_ = value;
    }
  }

  /// <summary>Field number for the "svevtid" field.</summary>
  public const int SvevtidFieldNumber = 2;
  private global::MSServerEvent svevtid_ = 0;
  /// <summary>
  /// Event type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSServerEvent Svevtid {
    get { return svevtid_; }
    set {
      svevtid_ = value;
    }
  }

  /// <summary>Field number for the "plevtid" field.</summary>
  public const int PlevtidFieldNumber = 3;
  private global::MSPlayerEvent plevtid_ = 0;
  /// <summary>
  /// Sub ev type
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MSPlayerEvent Plevtid {
    get { return plevtid_; }
    set {
      plevtid_ = value;
    }
  }

  /// <summary>Field number for the "session" field.</summary>
  public const int SessionFieldNumber = 4;
  private global::SessionData session_;
  /// <summary>
  /// SessionData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SessionData Session {
    get { return session_; }
    set {
      session_ = value;
    }
  }

  /// <summary>Field number for the "clData" field.</summary>
  public const int ClDataFieldNumber = 5;
  private global::ClientData clData_;
  /// <summary>
  /// ClientData
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ClientData ClData {
    get { return clData_; }
    set {
      clData_ = value;
    }
  }

  /// <summary>Field number for the "updatedGameObjects" field.</summary>
  public const int UpdatedGameObjectsFieldNumber = 6;
  private static readonly pb::FieldCodec<global::sGameObject> _repeated_updatedGameObjects_codec
      = pb::FieldCodec.ForMessage(50, global::sGameObject.Parser);
  private readonly pbc::RepeatedField<global::sGameObject> updatedGameObjects_ = new pbc::RepeatedField<global::sGameObject>();
  /// <summary>
  /// GameObjects list
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::sGameObject> UpdatedGameObjects {
    get { return updatedGameObjects_; }
  }

  /// <summary>Field number for the "interaction" field.</summary>
  public const int InteractionFieldNumber = 7;
  private global::ObjectAction interaction_;
  /// <summary>
  /// interaction message
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ObjectAction Interaction {
    get { return interaction_; }
    set {
      interaction_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShiftServerData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShiftServerData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Basevtid != other.Basevtid) return false;
    if (Svevtid != other.Svevtid) return false;
    if (Plevtid != other.Plevtid) return false;
    if (!object.Equals(Session, other.Session)) return false;
    if (!object.Equals(ClData, other.ClData)) return false;
    if(!updatedGameObjects_.Equals(other.updatedGameObjects_)) return false;
    if (!object.Equals(Interaction, other.Interaction)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Basevtid != 0) hash ^= Basevtid.GetHashCode();
    if (Svevtid != 0) hash ^= Svevtid.GetHashCode();
    if (Plevtid != 0) hash ^= Plevtid.GetHashCode();
    if (session_ != null) hash ^= Session.GetHashCode();
    if (clData_ != null) hash ^= ClData.GetHashCode();
    hash ^= updatedGameObjects_.GetHashCode();
    if (interaction_ != null) hash ^= Interaction.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Basevtid != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Basevtid);
    }
    if (Svevtid != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Svevtid);
    }
    if (Plevtid != 0) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Plevtid);
    }
    if (session_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Session);
    }
    if (clData_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ClData);
    }
    updatedGameObjects_.WriteTo(output, _repeated_updatedGameObjects_codec);
    if (interaction_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Interaction);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Basevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Basevtid);
    }
    if (Svevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Svevtid);
    }
    if (Plevtid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Plevtid);
    }
    if (session_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Session);
    }
    if (clData_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ClData);
    }
    size += updatedGameObjects_.CalculateSize(_repeated_updatedGameObjects_codec);
    if (interaction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Interaction);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShiftServerData other) {
    if (other == null) {
      return;
    }
    if (other.Basevtid != 0) {
      Basevtid = other.Basevtid;
    }
    if (other.Svevtid != 0) {
      Svevtid = other.Svevtid;
    }
    if (other.Plevtid != 0) {
      Plevtid = other.Plevtid;
    }
    if (other.session_ != null) {
      if (session_ == null) {
        session_ = new global::SessionData();
      }
      Session.MergeFrom(other.Session);
    }
    if (other.clData_ != null) {
      if (clData_ == null) {
        clData_ = new global::ClientData();
      }
      ClData.MergeFrom(other.ClData);
    }
    updatedGameObjects_.Add(other.updatedGameObjects_);
    if (other.interaction_ != null) {
      if (interaction_ == null) {
        interaction_ = new global::ObjectAction();
      }
      Interaction.MergeFrom(other.Interaction);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          basevtid_ = (global::MSBaseEventId) input.ReadEnum();
          break;
        }
        case 16: {
          svevtid_ = (global::MSServerEvent) input.ReadEnum();
          break;
        }
        case 24: {
          plevtid_ = (global::MSPlayerEvent) input.ReadEnum();
          break;
        }
        case 34: {
          if (session_ == null) {
            session_ = new global::SessionData();
          }
          input.ReadMessage(session_);
          break;
        }
        case 42: {
          if (clData_ == null) {
            clData_ = new global::ClientData();
          }
          input.ReadMessage(clData_);
          break;
        }
        case 50: {
          updatedGameObjects_.AddEntriesFrom(input, _repeated_updatedGameObjects_codec);
          break;
        }
        case 58: {
          if (interaction_ == null) {
            interaction_ = new global::ObjectAction();
          }
          input.ReadMessage(interaction_);
          break;
        }
      }
    }
  }

}

public sealed partial class SessionData : pb::IMessage<SessionData> {
  private static readonly pb::MessageParser<SessionData> _parser = new pb::MessageParser<SessionData>(() => new SessionData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SessionData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData(SessionData other) : this() {
    sid_ = other.sid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SessionData Clone() {
    return new SessionData(this);
  }

  /// <summary>Field number for the "sid" field.</summary>
  public const int SidFieldNumber = 2;
  private string sid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Sid {
    get { return sid_; }
    set {
      sid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SessionData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SessionData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Sid != other.Sid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Sid.Length != 0) hash ^= Sid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Sid.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Sid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Sid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Sid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SessionData other) {
    if (other == null) {
      return;
    }
    if (other.Sid.Length != 0) {
      Sid = other.Sid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          Sid = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ObjectAction : pb::IMessage<ObjectAction> {
  private static readonly pb::MessageParser<ObjectAction> _parser = new pb::MessageParser<ObjectAction>(() => new ObjectAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction(ObjectAction other) : this() {
    currentObject_ = other.currentObject_ != null ? other.currentObject_.Clone() : null;
    interactedObjects_ = other.interactedObjects_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectAction Clone() {
    return new ObjectAction(this);
  }

  /// <summary>Field number for the "currentObject" field.</summary>
  public const int CurrentObjectFieldNumber = 1;
  private global::sGameObject currentObject_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::sGameObject CurrentObject {
    get { return currentObject_; }
    set {
      currentObject_ = value;
    }
  }

  /// <summary>Field number for the "interactedObjects" field.</summary>
  public const int InteractedObjectsFieldNumber = 2;
  private static readonly pb::FieldCodec<global::sGameObject> _repeated_interactedObjects_codec
      = pb::FieldCodec.ForMessage(18, global::sGameObject.Parser);
  private readonly pbc::RepeatedField<global::sGameObject> interactedObjects_ = new pbc::RepeatedField<global::sGameObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::sGameObject> InteractedObjects {
    get { return interactedObjects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CurrentObject, other.CurrentObject)) return false;
    if(!interactedObjects_.Equals(other.interactedObjects_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (currentObject_ != null) hash ^= CurrentObject.GetHashCode();
    hash ^= interactedObjects_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (currentObject_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CurrentObject);
    }
    interactedObjects_.WriteTo(output, _repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (currentObject_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurrentObject);
    }
    size += interactedObjects_.CalculateSize(_repeated_interactedObjects_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectAction other) {
    if (other == null) {
      return;
    }
    if (other.currentObject_ != null) {
      if (currentObject_ == null) {
        currentObject_ = new global::sGameObject();
      }
      CurrentObject.MergeFrom(other.CurrentObject);
    }
    interactedObjects_.Add(other.interactedObjects_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (currentObject_ == null) {
            currentObject_ = new global::sGameObject();
          }
          input.ReadMessage(currentObject_);
          break;
        }
        case 18: {
          interactedObjects_.AddEntriesFrom(input, _repeated_interactedObjects_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ClientData : pb::IMessage<ClientData> {
  private static readonly pb::MessageParser<ClientData> _parser = new pb::MessageParser<ClientData>(() => new ClientData());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientData> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData(ClientData other) : this() {
    ver_ = other.ver_;
    loginname_ = other.loginname_;
    machineName_ = other.machineName_;
    machineId_ = other.machineId_;
    guid_ = other.guid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientData Clone() {
    return new ClientData(this);
  }

  /// <summary>Field number for the "ver" field.</summary>
  public const int VerFieldNumber = 1;
  private string ver_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ver {
    get { return ver_; }
    set {
      ver_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "loginname" field.</summary>
  public const int LoginnameFieldNumber = 2;
  private string loginname_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Loginname {
    get { return loginname_; }
    set {
      loginname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_name" field.</summary>
  public const int MachineNameFieldNumber = 3;
  private string machineName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineName {
    get { return machineName_; }
    set {
      machineName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "machine_id" field.</summary>
  public const int MachineIdFieldNumber = 4;
  private string machineId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string MachineId {
    get { return machineId_; }
    set {
      machineId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "guid" field.</summary>
  public const int GuidFieldNumber = 5;
  private string guid_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Guid {
    get { return guid_; }
    set {
      guid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientData);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientData other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Ver != other.Ver) return false;
    if (Loginname != other.Loginname) return false;
    if (MachineName != other.MachineName) return false;
    if (MachineId != other.MachineId) return false;
    if (Guid != other.Guid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Ver.Length != 0) hash ^= Ver.GetHashCode();
    if (Loginname.Length != 0) hash ^= Loginname.GetHashCode();
    if (MachineName.Length != 0) hash ^= MachineName.GetHashCode();
    if (MachineId.Length != 0) hash ^= MachineId.GetHashCode();
    if (Guid.Length != 0) hash ^= Guid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Ver.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Ver);
    }
    if (Loginname.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Loginname);
    }
    if (MachineName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MachineName);
    }
    if (MachineId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(MachineId);
    }
    if (Guid.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Guid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Ver.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ver);
    }
    if (Loginname.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Loginname);
    }
    if (MachineName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineName);
    }
    if (MachineId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MachineId);
    }
    if (Guid.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Guid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientData other) {
    if (other == null) {
      return;
    }
    if (other.Ver.Length != 0) {
      Ver = other.Ver;
    }
    if (other.Loginname.Length != 0) {
      Loginname = other.Loginname;
    }
    if (other.MachineName.Length != 0) {
      MachineName = other.MachineName;
    }
    if (other.MachineId.Length != 0) {
      MachineId = other.MachineId;
    }
    if (other.Guid.Length != 0) {
      Guid = other.Guid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Ver = input.ReadString();
          break;
        }
        case 18: {
          Loginname = input.ReadString();
          break;
        }
        case 26: {
          MachineName = input.ReadString();
          break;
        }
        case 34: {
          MachineId = input.ReadString();
          break;
        }
        case 42: {
          Guid = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class sGameObject : pb::IMessage<sGameObject> {
  private static readonly pb::MessageParser<sGameObject> _parser = new pb::MessageParser<sGameObject>(() => new sGameObject());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<sGameObject> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject(sGameObject other) : this() {
    oid_ = other.oid_;
    posX_ = other.posX_;
    posY_ = other.posY_;
    posZ_ = other.posZ_;
    rotX_ = other.rotX_;
    rotY_ = other.rotY_;
    rotZ_ = other.rotZ_;
    sclX_ = other.sclX_;
    sclY_ = other.sclY_;
    sclZ_ = other.sclZ_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public sGameObject Clone() {
    return new sGameObject(this);
  }

  /// <summary>Field number for the "oid" field.</summary>
  public const int OidFieldNumber = 1;
  private int oid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oid {
    get { return oid_; }
    set {
      oid_ = value;
    }
  }

  /// <summary>Field number for the "pos_x" field.</summary>
  public const int PosXFieldNumber = 2;
  private float posX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosX {
    get { return posX_; }
    set {
      posX_ = value;
    }
  }

  /// <summary>Field number for the "pos_y" field.</summary>
  public const int PosYFieldNumber = 3;
  private float posY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosY {
    get { return posY_; }
    set {
      posY_ = value;
    }
  }

  /// <summary>Field number for the "pos_z" field.</summary>
  public const int PosZFieldNumber = 4;
  private float posZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PosZ {
    get { return posZ_; }
    set {
      posZ_ = value;
    }
  }

  /// <summary>Field number for the "rot_x" field.</summary>
  public const int RotXFieldNumber = 5;
  private float rotX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotX {
    get { return rotX_; }
    set {
      rotX_ = value;
    }
  }

  /// <summary>Field number for the "rot_y" field.</summary>
  public const int RotYFieldNumber = 6;
  private float rotY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotY {
    get { return rotY_; }
    set {
      rotY_ = value;
    }
  }

  /// <summary>Field number for the "rot_z" field.</summary>
  public const int RotZFieldNumber = 7;
  private float rotZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RotZ {
    get { return rotZ_; }
    set {
      rotZ_ = value;
    }
  }

  /// <summary>Field number for the "scl_x" field.</summary>
  public const int SclXFieldNumber = 8;
  private float sclX_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SclX {
    get { return sclX_; }
    set {
      sclX_ = value;
    }
  }

  /// <summary>Field number for the "scl_y" field.</summary>
  public const int SclYFieldNumber = 9;
  private float sclY_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SclY {
    get { return sclY_; }
    set {
      sclY_ = value;
    }
  }

  /// <summary>Field number for the "scl_z" field.</summary>
  public const int SclZFieldNumber = 10;
  private float sclZ_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float SclZ {
    get { return sclZ_; }
    set {
      sclZ_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as sGameObject);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(sGameObject other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Oid != other.Oid) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosX, other.PosX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosY, other.PosY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PosZ, other.PosZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotX, other.RotX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotY, other.RotY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RotZ, other.RotZ)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SclX, other.SclX)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SclY, other.SclY)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(SclZ, other.SclZ)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Oid != 0) hash ^= Oid.GetHashCode();
    if (PosX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosX);
    if (PosY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosY);
    if (PosZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PosZ);
    if (RotX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotX);
    if (RotY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotY);
    if (RotZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RotZ);
    if (SclX != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SclX);
    if (SclY != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SclY);
    if (SclZ != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(SclZ);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Oid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Oid);
    }
    if (PosX != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(PosX);
    }
    if (PosY != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(PosY);
    }
    if (PosZ != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(PosZ);
    }
    if (RotX != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(RotX);
    }
    if (RotY != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(RotY);
    }
    if (RotZ != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(RotZ);
    }
    if (SclX != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(SclX);
    }
    if (SclY != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(SclY);
    }
    if (SclZ != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(SclZ);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Oid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
    }
    if (PosX != 0F) {
      size += 1 + 4;
    }
    if (PosY != 0F) {
      size += 1 + 4;
    }
    if (PosZ != 0F) {
      size += 1 + 4;
    }
    if (RotX != 0F) {
      size += 1 + 4;
    }
    if (RotY != 0F) {
      size += 1 + 4;
    }
    if (RotZ != 0F) {
      size += 1 + 4;
    }
    if (SclX != 0F) {
      size += 1 + 4;
    }
    if (SclY != 0F) {
      size += 1 + 4;
    }
    if (SclZ != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(sGameObject other) {
    if (other == null) {
      return;
    }
    if (other.Oid != 0) {
      Oid = other.Oid;
    }
    if (other.PosX != 0F) {
      PosX = other.PosX;
    }
    if (other.PosY != 0F) {
      PosY = other.PosY;
    }
    if (other.PosZ != 0F) {
      PosZ = other.PosZ;
    }
    if (other.RotX != 0F) {
      RotX = other.RotX;
    }
    if (other.RotY != 0F) {
      RotY = other.RotY;
    }
    if (other.RotZ != 0F) {
      RotZ = other.RotZ;
    }
    if (other.SclX != 0F) {
      SclX = other.SclX;
    }
    if (other.SclY != 0F) {
      SclY = other.SclY;
    }
    if (other.SclZ != 0F) {
      SclZ = other.SclZ;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Oid = input.ReadInt32();
          break;
        }
        case 21: {
          PosX = input.ReadFloat();
          break;
        }
        case 29: {
          PosY = input.ReadFloat();
          break;
        }
        case 37: {
          PosZ = input.ReadFloat();
          break;
        }
        case 45: {
          RotX = input.ReadFloat();
          break;
        }
        case 53: {
          RotY = input.ReadFloat();
          break;
        }
        case 61: {
          RotZ = input.ReadFloat();
          break;
        }
        case 69: {
          SclX = input.ReadFloat();
          break;
        }
        case 77: {
          SclY = input.ReadFloat();
          break;
        }
        case 85: {
          SclZ = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class PlayerInput : pb::IMessage<PlayerInput> {
  private static readonly pb::MessageParser<PlayerInput> _parser = new pb::MessageParser<PlayerInput>(() => new PlayerInput());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PlayerInput> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ShiftServerMessagesReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput(PlayerInput other) : this() {
    oid_ = other.oid_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PlayerInput Clone() {
    return new PlayerInput(this);
  }

  /// <summary>Field number for the "oid" field.</summary>
  public const int OidFieldNumber = 1;
  private int oid_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Oid {
    get { return oid_; }
    set {
      oid_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PlayerInput);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PlayerInput other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Oid != other.Oid) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Oid != 0) hash ^= Oid.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Oid != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Oid);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Oid != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Oid);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PlayerInput other) {
    if (other == null) {
      return;
    }
    if (other.Oid != 0) {
      Oid = other.Oid;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Oid = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
